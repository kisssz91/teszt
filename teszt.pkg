create or replace package em_prod.PKG_EM_TR_FEES is

  -- Author  : BCG01
  -- Created : 2023.02.14 11:05:52
  -- Purpose : EM tranzakciós dij számitás

  -- Public type declarations
  --type <TypeName> is <Datatype>;

  -- Public constant declarations
  --<ConstantName> constant <Datatype> := <Value>;

  -- Public variable declarations
  em_dwh_sor     EM_DWH%rowtype;

  --acc_disc_sor   ACC_LEVEL_DISCOUNTS%rowtype;
  --tmp_acc_disc_sor   ACC_LEVEL_DISCOUNTS%rowtype;
  --card_disc_sor  CARD_LEVEL_DISCOUNTS%rowtype;
  --tmp_card_disc_sor  CARD_LEVEL_DISCOUNTS%rowtype;

  -- Public function and procedure declarations
  --function teszt_trxdij return number;
  function em_tr_fees_calc(trx_amt number,
                           trx_currency varchar2,
                           trx_date date,
                           acc_currency varchar2,
                           ktg_codes varchar2,
                           circle_type varchar2,
                           event_type varchar2,
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date,
                           cde_prov VARCHAR2) return number;

  function em_tr_fees_calc_tech(trx_date date,
                           acc_currency varchar2,
                           ktg_codes varchar2,
                           circle_type varchar2,
                           event_type varchar2,
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number;

  function em_tr_fees_calc_dupla_konv(trx_amt number,
                           trx_currency varchar2,
                           trx_date date,
                           acc_currency varchar2,
                           ktg_codes varchar2,
                           circle_type varchar2,
                           event_type varchar2,
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number;

 /*function em_tr_fees_calc_new(trx_amt number,
                           trx_currency varchar2,
                           trx_date date,
                           acc_currency varchar2,
                           ktg_codes varchar2,
                           circle_type varchar2,
                           event_type varchar2,
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number;

function fkb_tr_fees_convert(trx_amt number,
                           trx_currency varchar2,
                           trx_date date,
                           acc_currency varchar2,
                           dborcr varchar2) return number;

function load_card_and_acc_disc(p_sysdate date) return integer;

function check_discount(trx_amt number,
                        trx_currency varchar2,
                        trx_date date,
                        acc_currency varchar2,
                        ktg_codes varchar2,
                        circle_type varchar2,
                        event_type varchar2,
                        trx_pan varchar2,
                        full_tr_fees OUT number) return number;

function set_acc_level_discount(par_acc_disc_sor ACC_LEVEL_DISCOUNTS%rowtype) return ACC_LEVEL_DISCOUNTS%rowtype;
function set_card_level_discount(par_card_disc_sor CARD_LEVEL_DISCOUNTS%rowtype) return CARD_LEVEL_DISCOUNTS%rowtype;
function set_acc_and_crd_disc_dload(par_pan varchar2) return number;
function archiv_acc_and_crd_disc(par_sysdate date) return number;
function daily_check_hirdkod_ktgcode(p_sysdate date) return number;
function daily_load_card_and_acc_disc(p_sysdate date) return number;*/

function pin_ujragyartas(p_sysdate date) return number;
function pin_ujragyartas_feld(p_sysdate date) return number;
function find_mbh_iss_crd_fees(p_product_id varchar2,
                               p_ktgkod varchar2,
                               p_giro varchar2,
                               p_fee_type_id number,
                               p_date date,
                               p_accn varchar2,
                               p_db OUT number) return MBH_ISS_CRD_FEES%rowtype;

function mbh_iss_fees_calc(p_sysdate date) return number;
function ujkartya_igeny(p_sysdate date) return number;
function ujkartya_igeny_feld(p_sysdate date) return number;
function kartya_megujitas(p_sysdate date) return number;
function kartya_megujitas_feld(p_sysdate date) return number;
function kartya_megszunes(p_sysdate date) return number;
function kartya_letiltas(p_sysdate date) return number;
function kartya_orzes(p_sysdate date) return number;

function fovez_mbh_iss_fees_calc(p_sysdate date) return number;
function archiv_mbh_iss_crd_events(par_sysdate date, par_dload number) return number;

function check_mbh_product_fee_rule(p_product_id varchar2,
                                    p_fee_type_id number,
                                    p_sysdate date) return number;
function cr_event_from_em_dwh(p_em_dwh_sor EM_DWH%rowtype,
                              p_fee_type_id number) return MBH_ISS_CRD_EVENTS%rowtype;

function mbh_iss_crd_events_osfeltoltes(p_sysdate date) return number;

end PKG_EM_TR_FEES;
/
create or replace package body em_prod.PKG_EM_TR_FEES is
  --2024.08.13 hiányzott a visszamenőleges időpontra vonatkozó szabály dátum ellenőrzés, pótolva F.Viktor
  --2024.09.11 minden select into előtt count(*) a NO_DATA_FOUND hibák kezelésére
  --2024.09.11 A díjesemények dátuma az esemény keletkezésének dátumához igazítva
  --2024.09.11 SZK-k utolsó éves díját nem kell előjegyezni
  -- Private type declarations
  --type <TypeName> is <Datatype>;
  
  -- Private constant declarations
  --<ConstantName> constant <Datatype> := <Value>;

  -- Private variable declarations
  --<VariableName> <Datatype>;
  
  -- Function and procedure implementations
  /*function teszt_trxdij return number is
    
  cursor transactions is
         SELECT m.isf_orig_amt,
                m.isf_curr,
                to_date(m.isf_tr_date,'YYYYMMDD') as isf_tr_date,
                a.acc_curr,
                m.tr_code,
                m.circle_type,
                m.event_type,
                0 as calc_method,
                m.isf_amt,
                m.tfe_amt
          FROM d_mc22_tr_fees m
               ,acc_data a
          WHERE TRIM(a.acc_num) = TRIM(m.isf_crd_giro || m.isf_crd_branch || m.isf_crd_account);         
   
   msor transactions%rowtype; 
   osor tmp_trdij_szam%rowtype;
     
   c NUMBER;
   
   begin
    
     select count(*) into c from user_tables where table_name = upper('tmp_trdij_szam');
     if c = 1 
       then execute immediate 'truncate table tmp_trdij_szam';
     end if;  
   
     for msor in transactions LOOP
         osor.trx_amt := msor.isf_orig_amt;
         osor.trx_curr := msor.isf_curr;
         osor.trx_date := msor.isf_tr_date;
         osor.acc_curr := msor.acc_curr;
         osor.ktg_codes := msor.tr_code;
         osor.circle_type := msor.circle_type;
         osor.event_type := msor.event_type;
         osor.calc_method := msor.calc_method;
         osor.isf_amt := msor.isf_amt;
         osor.tfe_amt := msor.tfe_amt;
         
         osor.amt := em_tr_fees_calc(msor.isf_orig_amt,
                                     msor.isf_curr,
                                     msor.isf_tr_date,
                                     msor.acc_curr,
                                     msor.tr_code,
                                     msor.circle_type,
                                     msor.event_type,
                                     msor.calc_method,
                                     osor.rule,
                                     osor.effect_date_code,
                                     osor.effect_date_rule );
                                     
                                           
                      
         insert into tmp_trdij_szam values (osor.trx_amt, osor.trx_curr, osor.trx_date, osor.acc_curr, osor.ktg_codes, osor.circle_type, osor.event_type,
         osor.calc_method, osor.rule, osor.effect_date_code, osor.effect_date_rule, osor.isf_amt, osor.tfe_amt, osor.amt);             
         commit;                
     end loop;  
   return 0;
  end; */   
    
  function em_tr_fees_calc(trx_amt number, 
                           trx_currency varchar2, 
                           trx_date date, 
                           acc_currency varchar2, 
                           ktg_codes varchar2,
                           circle_type varchar2, 
                           event_type varchar2, 
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT DATE,
                           cde_prov VARCHAR2) return number is
   hiba number := 0;
   tr_dij number := 0;
   tr_ill number := 0;
   retval number;

   ktg_code em_iss_ktg_codes%rowtype;
   ktg_rule em_iss_ktg_rules%rowtype;
   db number;
   fee_curr varchar2(3);
   
   tmp_circle_type varchar2(5);
   tmp_event_type varchar2(5);
   tmp_amount number;
   tmp_rate1 number;
   tmp_rate2 number;
   tmp_evt varchar2(5);
   ineventtype boolean;
   tmp_fee_fix number;
      
   begin
    select nvl((select 'true' from dual where Trim(event_type) not in (SELECT Trim(CTCODE) FROM CODE_TABLE WHERE Trim(CODETYPE) ='EVENT_TYPE')),'false') into tmp_evt from dual;
    case upper(tmp_evt) 
      when 'TRUE' then ineventtype := true;
      when 'FALSE' then ineventtype := false;
      else ineventtype := null;
    end case;
    
    --  Paraméterek ellenőrzése
    
    if (trx_amt is null) or
       (trx_currency not in ('840','978','348','756','826') or trx_currency is null) or
       (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
       (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
       (ktg_codes is null) or
       (circle_type not in ('OWN','TSZ','BHM','BHV','DOM','VDM','EUR','WRL','VER','VWL','EGM','EGV') or circle_type is null) or
       (ineventtype or event_type is null) or
       (calc_method not in (0,1,2,3) or calc_method is null) 
       then hiba := 1;
    end if; 
    
    /*if (acc_currency <> '348' and acc_currency <> trx_currency)
       then hiba := 1;
    end if;*/ 
   
    
    -- Paraméterek átforgatása
    case circle_type
      when 'OWN' then tmp_circle_type := 'x10';
      when 'TSZ' then tmp_circle_type := 'x10';
      when 'BHM' then tmp_circle_type := 'x10';
      when 'BHV' then tmp_circle_type := 'x10';
      when 'DOM' then tmp_circle_type := 'x20';
      when 'VDM' then tmp_circle_type := 'x20';
      when 'EUR' then tmp_circle_type := 'x60';
      when 'WRL' then tmp_circle_type := 'x60';
      when 'VER' then tmp_circle_type := 'x60';
      when 'VWL' then tmp_circle_type := 'x60';
      when 'EGM' then tmp_circle_type := 'x70'; 
      when 'EGV' then tmp_circle_type := 'x70';
      else hiba := 1;
    end case;
    
    case event_type
      --when 'CSH' then tmp_event_type := 'ATM';
      WHEN 'CSH' THEN
          CASE cde_prov
               WHEN 'ATM' THEN tmp_event_type:='ATM';
               ELSE tmp_event_type:='CSH';
          END CASE;
      when 'BAL' then tmp_event_type := 'BAL';
      when 'PIN' then tmp_event_type := 'PIN';
      when 'DEP' then tmp_event_type := 'DEP';
      when 'PWC' then tmp_event_type := 'PWC';
      else hiba := 1;
    end case;
       
    -- elszámolási szabály csak egy lehet ha tobb van vagy nincs akkor baj van.
    SELECT count(*) into db
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type 
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                            );
    
    if db <> 1 then hiba := 1;
    end if;                               
    
    if hiba = 0 then begin 
      
        -- em_iss_ktg_codes
        SELECT k.* into ktg_code
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );
                        
        -- em_iss_ktg_rules
        SELECT r.* into ktg_rule
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type 
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );            
                        
        rule := ktg_rule.rule;
        efect_date_code := ktg_code.efect_date;
        efect_date_rule := ktg_rule.efect_date;
        fee_curr := ktg_rule.fee_curr; 
        
        -- Ft-ben lévő fix díj átváltása a tranzakció devizanemére                 
        if trx_currency <> '348' and fee_curr = '348'
               then tmp_fee_fix := pkg_exchange.settlement_currency_exchange(ktg_rule.fee_fix,
                                   fee_curr,
                                   trx_currency,
                                   ktg_rule.fee_fix,
                                   fee_curr,
                                   trx_date, 
                                   'DB',
                                   tmp_rate1,
                                   tmp_rate2);
               else tmp_fee_fix := ktg_rule.fee_fix;
        end if;         
            
                                
        -- Elszámolás módok szerint
        case calc_method
          when 0 then begin -- normál
                        tr_dij := tmp_fee_fix + trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;   ---   ? FT-en van ez is átvátás?
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := trx_amt * ktg_rule.trill;
                   end;
          when 1 then begin -- ingyenes
                        tr_dij := 0;
                        tr_ill := 0;
                   end;
          when 2 then begin -- tr dij mentes
                        tr_dij := 0;
                        tr_ill := trx_amt * ktg_rule.trill;
                   end;
          when 3 then begin -- tr illeték mentes
                        tr_dij := tmp_fee_fix + trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := 0;
                   end;
       end case;
     end;              
    end if; 
       
    tmp_amount := (tr_dij + tr_ill);
                              
    
    if hiba = 1
      then begin 
        if (tmp_event_type IN ('ATM','CSH','PWC')) 
          then retval := -1;
          else retval := 0;
         end if;   
      end;
      else begin 
        if (acc_currency = '348') or retval <> 0
            then retval := round(tmp_amount,0);
            else retval := round(tmp_amount,2);
        end if;
      end;
    end if;
        
    return(retval);
  end;
  
  function em_tr_fees_calc_tech(trx_date date, 
                           acc_currency varchar2, 
                           ktg_codes varchar2,
                           circle_type varchar2, 
                           event_type varchar2, 
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number is
   hiba number := 0;
   tr_dij number := 0;
   tr_ill number := 0;
   retval number;

   ktg_code em_iss_ktg_codes%rowtype;
   ktg_rule em_iss_ktg_rules%rowtype;
   db number;
   fee_curr varchar2(3);
   
   tmp_circle_type varchar2(5);
   tmp_event_type varchar2(5);
   tmp_amount number;
   tmp_rate1 number;
   tmp_rate2 number;
   tmp_evt varchar2(5);
   ineventtype boolean;
   tmp_fee_fix number;
      
   begin
    select nvl((select 'true' from dual where Trim(event_type) not in (SELECT Trim(CTCODE) FROM CODE_TABLE WHERE Trim(CODETYPE) ='EVENT_TYPE')),'false') into tmp_evt from dual;
    case upper(tmp_evt) 
      when 'TRUE' then ineventtype := true;
      when 'FALSE' then ineventtype := false;
      else ineventtype := null;
    end case;
    
    --  Paraméterek ellenőrzése
    
    if (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
       (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
       (ktg_codes is null) or
       (circle_type not in ('OWN','TSZ','BHM','BHV','DOM','VDM','EUR','WRL','VER','VWL','EGM','EGV') or circle_type is null) or
       (ineventtype or event_type is null) or
       (calc_method not in (0,1,2,3) or calc_method is null) 
       then hiba := 1;
    end if; 
    
    -- Paraméterek átforgatása
    case circle_type
      when 'OWN' then tmp_circle_type := 'x10';
      when 'TSZ' then tmp_circle_type := 'x10';
      when 'BHM' then tmp_circle_type := 'x10';
      when 'BHV' then tmp_circle_type := 'x10';
      when 'DOM' then tmp_circle_type := 'x20';
      when 'VDM' then tmp_circle_type := 'x20';
      when 'EUR' then tmp_circle_type := 'x60';
      when 'WRL' then tmp_circle_type := 'x60';
      when 'VER' then tmp_circle_type := 'x60';
      when 'VWL' then tmp_circle_type := 'x60';
      when 'EGM' then tmp_circle_type := 'x70'; 
      when 'EGV' then tmp_circle_type := 'x70';
      else hiba := 1;
    end case;
    
    case event_type
      when 'CSH' then tmp_event_type := 'ATM';
      when 'BAL' then tmp_event_type := 'BAL';
      when 'PIN' then tmp_event_type := 'PIN';
      when 'PWC' then tmp_event_type := 'PWC';
      else hiba := 1;
    end case;
       
    -- elszámolási szabály csak egy lehet ha tobb van vagy nincs akkor baj van.
    SELECT count(*) into db
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type 
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                            );
    
    if db <> 1 then hiba := 1;
    end if;                               
    
    if hiba = 0 then begin 
      
        -- em_iss_ktg_codes
        SELECT k.* into ktg_code
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );
                        
        -- em_iss_ktg_rules
        SELECT r.* into ktg_rule
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type 
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );            
                        
        rule := ktg_rule.rule;
        efect_date_code := ktg_code.efect_date;
        efect_date_rule := ktg_rule.efect_date;
        fee_curr := ktg_rule.fee_curr; 
        
        -- Ft-ben lévő fix díj átváltása a tranzakció devizanemére                 
        if fee_curr != acc_currency
               then tmp_fee_fix := pkg_exchange.settlement_currency_exch_tech(ktg_rule.fee_fix,
                                   fee_curr,
                                   acc_currency,
                                   ktg_rule.fee_fix,
                                   fee_curr,
                                   trx_date, 
                                   'DB',
                                   tmp_rate1,
                                   tmp_rate2);
               else tmp_fee_fix := ktg_rule.fee_fix;
        end if;         
            
                                
        -- Elszámolás módok szerint
        case calc_method
          when 0 then begin -- normál
                        tr_dij := tmp_fee_fix;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;   ---   ? FT-en van ez is átvátás?
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := 0;
                   end;
          when 1 then begin -- ingyenes
                        tr_dij := 0;
                        tr_ill := 0;
                   end;
          when 2 then begin -- tr dij mentes
                        tr_dij := 0;
                        tr_ill := 0;
                   end;
          when 3 then begin -- tr illeték mentes
                        tr_dij := tmp_fee_fix;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := 0;
                   end;
       end case;
     end;              
    end if; 
       
    tmp_amount := (tr_dij + tr_ill);
                              
    
    if hiba = 1
      then begin 
        if (tmp_event_type IN ('ATM','CSH','PWC'))
          then retval := -1;
          else retval := 0;
         end if;   
      end;
      else begin 
        if (acc_currency = '348') or retval <> 0
            then retval := round(tmp_amount,0);
            else retval := round(tmp_amount,2);
        end if;
      end;
    end if;
        
    return(retval);
  end;

  
  
  

function  em_tr_fees_calc_dupla_konv(trx_amt number, 
                           trx_currency varchar2, 
                           trx_date date, 
                           acc_currency varchar2, 
                           ktg_codes varchar2,
                           circle_type varchar2, 
                           event_type varchar2, 
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number is
   hiba number := 0;
   tr_dij number := 0;
   tr_ill number := 0;
   retval number;

   ktg_code em_iss_ktg_codes%rowtype;
   ktg_rule em_iss_ktg_rules%rowtype;
   db number;
   fee_curr varchar2(3);
   
   tmp_circle_type varchar2(5);
   tmp_event_type varchar2(5);
   tmp_amount number;
   tmp_rate1 number;
   tmp_rate2 number;
   tmp_evt varchar2(5);
   ineventtype boolean;
   tmp_trx_amt number;
      
   begin
    select nvl((select 'true' from dual where Trim(event_type) not in (SELECT Trim(CTCODE) FROM CODE_TABLE WHERE Trim(CODETYPE) ='EVENT_TYPE')),'false') into tmp_evt from dual;
    case upper(tmp_evt) 
      when 'TRUE' then ineventtype := true;
      when 'FALSE' then ineventtype := false;
      else ineventtype := null;
    end case;
    
    --  Paraméterek ellenőrzése
    
    if (trx_amt is null) or
       (trx_currency not in ('840','978','348','756','826') or trx_currency is null) or
       (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
       (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
       (ktg_codes is null) or
       (circle_type not in ('OWN','TSZ','BHM','BHV','DOM','VDM','EUR','WRL','VER','VWL','EGM','EGV') or circle_type is null) or
       (ineventtype or event_type is null) or
       (calc_method not in (0,1,2,3) or calc_method is null) 
       then hiba := 1;
    end if; 
    
    -- Paraméterek átforgatása
    case circle_type
      when 'OWN' then tmp_circle_type := 'x10';
      when 'TSZ' then tmp_circle_type := 'x10';
      when 'BHM' then tmp_circle_type := 'x10';
      when 'BHV' then tmp_circle_type := 'x10';
      when 'DOM' then tmp_circle_type := 'x20';
      when 'VDM' then tmp_circle_type := 'x20';
      when 'EUR' then tmp_circle_type := 'x60';
      when 'WRL' then tmp_circle_type := 'x60';
      when 'VER' then tmp_circle_type := 'x60';
      when 'VWL' then tmp_circle_type := 'x60';
      when 'EGM' then tmp_circle_type := 'x70'; 
      when 'EGV' then tmp_circle_type := 'x70';
      else hiba := 1;
    end case;  
    case event_type
      when 'CSH' then tmp_event_type := 'ATM';
      when 'BAL' then tmp_event_type := 'BAL';
      when 'PIN' then tmp_event_type := 'PIN';
      when 'PWC' then tmp_event_type := 'PWC';
      else hiba := 1;
    end case;
       
    -- elszámolási szabály csak egy lehet ha tobb van vagy nincs akkor baj van.
    SELECT count(*) into db
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type 
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                            );
    
    if db <> 1 then hiba := 1;
    end if;
    
    -- tranzakcio átváltása huf-ra                 
    if trx_currency <> '348'
       then tmp_trx_amt := pkg_exchange.settlement_currency_exchange(trx_amt,
                               trx_currency,
                               '348',
                               trx_amt,
                               trx_currency,
                               trx_date, 
                               'DB',
                               tmp_rate1,
                               tmp_rate2);
       else tmp_trx_amt := trx_amt;
    end if;         
       
    if  tmp_trx_amt = -1 
       then hiba := 1;
    end if;                                        
    
    if hiba = 0 then begin 
      
        -- em_iss_ktg_codes
        SELECT k.* into ktg_code
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );
                        
        -- em_iss_ktg_rules
        SELECT r.* into ktg_rule
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type 
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            and trunc(ee.efect_date) <= trunc(trx_date)
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );
                                
        -- Elszámolás módok szerint
        case calc_method
          when 0 then begin -- normál
                        tr_dij := ktg_rule.fee_fix + tmp_trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := tmp_trx_amt * ktg_rule.trill;
                   end;
          when 1 then begin -- ingyenes
                        tr_dij := 0;
                        tr_ill := 0;
                   end;
          when 2 then begin -- tr dij mentes
                        tr_dij := 0;
                        tr_ill := tmp_trx_amt * ktg_rule.trill;
                   end;
          when 3 then begin -- tr illeték mentes
                        tr_dij := ktg_rule.fee_fix + tmp_trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := 0;
                   end;
       end case;
       
       rule := ktg_rule.rule;
       efect_date_code := ktg_code.efect_date;
       efect_date_rule := ktg_rule.efect_date;
       fee_curr := ktg_rule.fee_curr;
       
     end;              
    end if; 
       
    -- Deviza átváltás ha eltér a számla és a tranzakció devizaneme
    tmp_amount := pkg_exchange.settlement_currency_exchange((tr_dij + tr_ill) ,
                               fee_curr,
                               acc_currency,
                               (tr_dij + tr_ill),
                               fee_curr,
                               trx_date, 
                               'DB',
                               tmp_rate1,
                               tmp_rate2);
                               
    if tmp_amount = -1 then hiba := 1;
    end if;   
    
    if hiba = 1
      then begin 
        if (tmp_event_type IN ('ATM','CSH','PWC'))
          then retval := -1;
          else retval := 0;
         end if;   
      end;
      else begin 
        if (acc_currency = '348') or retval <> 0
            then retval := round(tmp_amount,0);
            else retval := round(tmp_amount,2);
        end if;
      end;
    end if;
        
    return(retval);
  end;


  /*function em_tr_fees_calc_new(trx_amt number, 
                           trx_currency varchar2, 
                           trx_date date, 
                           acc_currency varchar2, 
                           ktg_codes varchar2,
                           circle_type varchar2, 
                           event_type varchar2, 
                           calc_method number,
                           rule OUT number,
                           efect_date_code OUT Date,
                           efect_date_rule OUT Date) return number is
   hiba number := 0;
   tr_dij number := 0;
   tr_ill number := 0;
   retval number;

   ktg_code em_iss_ktg_codes%rowtype;
   ktg_rule em_iss_ktg_rules%rowtype;
   db number;
   fee_curr varchar2(3);
   
   tmp_circle_type varchar2(5);
   tmp_event_type varchar2(5);
   tmp_amount number;
   tmp_rate1 number;
   tmp_rate2 number;
   tmp_evt varchar2(5);
   ineventtype boolean;
   tmp_fee_fix number;
      
   begin
    select nvl((select 'true' from dual where Trim(event_type) not in (SELECT Trim(CTCODE) FROM CODE_TABLE WHERE Trim(CODETYPE) ='EVENT_TYPE')),'false') into tmp_evt from dual;
    case upper(tmp_evt) 
      when 'TRUE' then ineventtype := true;
      when 'FALSE' then ineventtype := false;
      else ineventtype := null;
    end case;
    
    --  Paraméterek ellenőrzése
    
    if (trx_amt is null) or
       (trx_currency not in ('840','978','348','756','826') or trx_currency is null) or
       (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
       (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
       (ktg_codes is null) or
       (circle_type not in ('OWN','TSZ','BHM','BHV','DOM','VDM','EUR','WRL','VER','VWL','EGM','EGV') or circle_type is null) or
       (ineventtype or event_type is null) or
       (calc_method not in (0,1,2,3) or calc_method is null) 
       then hiba := 1;
    end if; 
    
    --if (acc_currency <> '348' and acc_currency <> trx_currency)
       --then hiba := 1;
    --end if; 
   
    
    -- Paraméterek átforgatása
    case circle_type
      when 'OWN' then tmp_circle_type := 'x10';
      when 'TSZ' then tmp_circle_type := 'x10';
      when 'BHM' then tmp_circle_type := 'x10';
      when 'BHV' then tmp_circle_type := 'x10';
      when 'DOM' then tmp_circle_type := 'x20';
      when 'VDM' then tmp_circle_type := 'x20';
      when 'EUR' then tmp_circle_type := 'x60';
      when 'WRL' then tmp_circle_type := 'x60';
      when 'VER' then tmp_circle_type := 'x60';
      when 'VWL' then tmp_circle_type := 'x60';
      when 'EGM' then tmp_circle_type := 'x70'; 
      when 'EGV' then tmp_circle_type := 'x70';
      else hiba := 1;
    end case;
    
    case event_type
      when 'ATM' then tmp_event_type := 'CSH';
      --when 'CSH' then tmp_event_type := 'CSH';
      when 'BAL' then tmp_event_type := 'BAL';
      when 'PIN' then tmp_event_type := 'PIN';
      when 'DEP' then tmp_event_type := 'DEP';
      when 'PWC' then tmp_event_type := 'PWC';
      else hiba := 1;
    end case;
       
    -- elszámolási szabály csak egy lehet ha tobb van vagy nincs akkor baj van.
    SELECT count(*) into db
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type 
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                            );
    
    if db <> 1 then hiba := 1;
    end if;                               
    
    if hiba = 0 then begin 
      
        -- em_iss_ktg_codes
        SELECT k.* into ktg_code
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );
                        
        -- em_iss_ktg_rules
        SELECT r.* into ktg_rule
        FROM em_iss_ktg_codes k
             ,em_iss_ktg_rules r
        WHERE k.rule = r.rule
        AND k.ktgcode = ktg_codes --'1045'  -- költségkód -- ktg_codes 
        AND k.typ_tnx = tmp_event_type
        AND k.ceree = tmp_circle_type 
        AND k.efect_date = (SELECT MAX(ee.efect_date)
        FROM em_iss_ktg_codes ee
                            WHERE ee.ktgcode = k.ktgcode
                            AND ee.typ_tnx = k.typ_tnx
                            AND ee.ceree = k.ceree
                            )
        AND r.efect_date = (SELECT MAX(rr.efect_date)
                            FROM em_iss_ktg_rules rr
                            WHERE rr.rule = k.rule
                            and trunc(rr.efect_date) <= trunc(trx_date)
                        );            
                        
        rule := ktg_rule.rule;
        efect_date_code := ktg_code.efect_date;
        efect_date_rule := ktg_rule.efect_date;
        fee_curr := ktg_rule.fee_curr; 
        
        -- Ft-ben lévő fix díj átváltása a tranzakció devizanemére                 
        -- if trx_currency <> '348' and fee_curr = '348'
        if (trx_currency <> fee_curr)
               then tmp_fee_fix := pkg_exchange.settlement_currency_exchange(ktg_rule.fee_fix,
                                   fee_curr,
                                   trx_currency,
                                   ktg_rule.fee_fix,
                                   fee_curr,
                                   trx_date, 
                                   'DB',
                                   tmp_rate1,
                                   tmp_rate2);
               else tmp_fee_fix := ktg_rule.fee_fix;
        end if;                    
                                
        -- Elszámolás módok szerint
        case calc_method
          when 0 then begin -- normál
                        tr_dij := tmp_fee_fix + trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;   ---   ? FT-en van ez is átvátás?
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := trx_amt * ktg_rule.trill;
                   end;
          when 1 then begin -- ingyenes
                        tr_dij := 0;
                        tr_ill := 0;
                   end;
          when 2 then begin -- tr dij mentes
                        tr_dij := 0;
                        tr_ill := trx_amt * ktg_rule.trill;
                   end;
          when 3 then begin -- tr illeték mentes
                        tr_dij := tmp_fee_fix + trx_amt*ktg_rule.fee_prct;
                        if tr_dij < ktg_rule.fee_min then tr_dij := ktg_rule.fee_min;
                        end if;
                        if tr_dij > ktg_rule.fee_max then tr_dij := ktg_rule.fee_max;
                        end if; 
                        tr_ill := 0;
                   end;
       end case;   
     end;              
    end if; 
       
    tmp_amount := (tr_dij + tr_ill);
    -- eltérő számla és tranzakvció devizaneme esetén átváltás
    if  trx_currency <> acc_currency
      then tmp_amount := pkg_exchange.settlement_currency_exchange(tmp_amount,
                               trx_currency,
                               acc_currency,
                               tmp_amount,
                               trx_currency,
                               trx_date, 
                               'DB',
                               tmp_rate1,
                               tmp_rate2);
    end if;                         
    
    if hiba = 1
      then begin 
        if (tmp_event_type in ('CSH','POS','PWC'))
          then retval := -1;
          else retval := 0;
         end if;   
      end;
      else begin 
        if (acc_currency = '348') or retval <> 0
            then retval := round(tmp_amount,0);
            else retval := round(tmp_amount,2);
        end if;
      end;
    end if;
        
    return(retval);
  end;


function fkb_tr_fees_convert(trx_amt number, 
                           trx_currency varchar2, 
                           trx_date date, 
                           acc_currency varchar2,
                           dborcr varchar2) return number is
                           
  hiba number := 0;
  retval number;
  
  tmp_amount number;
  tmp_rate1 number;
  tmp_rate2 number;
  
  begin
    
    --  Paraméterek ellenőrzése
    
    if (trx_amt is null) or
       (trx_currency not in ('840','978','348','756','826') or trx_currency is null) or
       (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
       (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
       (trim(dborcr) not in ('CR','DB') or dborcr is null)
       then hiba := 1;
    end if; 
  
    if hiba = 0 then begin 
         -- Ft-ben lévő fix díj átváltása a tranzakció devizanemére                 
         if trx_currency <> '348' or acc_currency <> '348'
            then tmp_amount := pkg_exchange.settlement_currency_exchange(trx_amt,
                                     trx_currency,
                                     acc_currency,
                                     trx_amt,
                                     trx_currency,
                                     trx_date, 
                                     dborcr,
                                     tmp_rate1,
                                     tmp_rate2);
            else tmp_amount := trx_amt;
          end if;           
        end;  
    end if;
  
    if (acc_currency = '348') or retval <> 0
       then retval := round(tmp_amount,0);
       else retval := round(tmp_amount,2);
    end if;
    return(retval);
  end;
  
  function load_card_and_acc_disc(p_sysdate date) return integer is
  
    db integer;
  
   cursor cur_dwh_acc is
      select  distinct dwh.hirdkod, dwh.acc_num_24
             from EM_DWH dwh
             join ACC_LEVEL_RULE al on al.hirkod = dwh.hirdkod and p_sysdate between al.vdstart and al.vdend
             where dwh.crd_status in ('0','1','C')
             and dwh.crd_seq_num = '999'
             and dwh.agent1 = '504';
             
    cursor cur_dwh_crd is
      select distinct dwh.ktgkod, dwh.crd_contract_id
             from EM_DWH dwh
             where dwh.crd_status in ('0','1','C')
             and dwh.crd_seq_num = '999'
             and (trim(dwh.hirdkod) not in(select trim(al.hirkod) from ACC_LEVEL_RULE al) or dwh.hirdkod is null);
  
    acc_disc_sor         ACC_LEVEL_DISCOUNTS%rowtype;
    card_disc_sor        CARD_LEVEL_DISCOUNTS%rowtype;
    acc_level_param_sor  ACC_LEVEL_PARAM%rowtype;
    card_level_param_sor CARD_LEVEL_PARAM%rowtype;
  
    begin
      delete from ACC_LEVEL_DISCOUNTS;
      delete from CARD_LEVEL_DISCOUNTS;
      commit;
      
      -- Számla alapu kedvezmény
      FOR dwh_sor in cur_dwh_acc LOOP
          
          select count(*) into db from ACC_LEVEL_PARAM  acp 
          where trim(acp.hirkod) = trim(dwh_sor.hirdkod)
          and  p_sysdate between acp.sdate and acp.vdate;
          
          if db = 1 then begin
                  
             select * into acc_level_param_sor from ACC_LEVEL_PARAM  acp 
             where trim(acp.hirkod) = trim(dwh_sor.hirdkod)
             and  p_sysdate between acp.sdate and acp.vdate
             order by acp.vdate desc
             offset 0 rows fetch next 1 rows only;
                        
             acc_disc_sor.acc_num_24    := dwh_sor.acc_num_24;
             acc_disc_sor.hirkod        := dwh_sor.hirdkod;     
             acc_disc_sor.tr_all        := acc_level_param_sor.tr_all;
             acc_disc_sor.atm_all       := acc_level_param_sor.atm_all;
             acc_disc_sor.atm_own_count := acc_level_param_sor.atm_own_count;
             acc_disc_sor.atm_own_trill := acc_level_param_sor.atm_own_trill;
             acc_disc_sor.atm_dom_count := acc_level_param_sor.atm_dom_count;
             acc_disc_sor.atm_dom_trill := acc_level_param_sor.atm_dom_trill;
             acc_disc_sor.atm_egt_count := acc_level_param_sor.atm_egt_count;
             acc_disc_sor.atm_egt_trill := acc_level_param_sor.atm_egt_trill;
             acc_disc_sor.atm_wrl_count := acc_level_param_sor.atm_wrl_count;
             acc_disc_sor.atm_wrl_trill := acc_level_param_sor.atm_wrl_trill;
             acc_disc_sor.pos_all       := acc_level_param_sor.pos_all;
             acc_disc_sor.pos_own_count := acc_level_param_sor.pos_own_count;
             acc_disc_sor.pos_own_trill := acc_level_param_sor.pos_own_trill;
             acc_disc_sor.pos_dom_count := acc_level_param_sor.pos_dom_count;
             acc_disc_sor.pos_dom_trill := acc_level_param_sor.pos_dom_trill;
             acc_disc_sor.pos_egt_count := acc_level_param_sor.pos_egt_count;
             acc_disc_sor.pos_egt_trill := acc_level_param_sor.pos_egt_trill;
             acc_disc_sor.pos_wrl_count := acc_level_param_sor.pos_wrl_count;
             acc_disc_sor.pos_wrl_trill := acc_level_param_sor.pos_wrl_trill;
             acc_disc_sor.pwc_all       := acc_level_param_sor.pwc_all;
             acc_disc_sor.pwc_own_count := acc_level_param_sor.pwc_own_count;
             acc_disc_sor.pwc_own_trill := acc_level_param_sor.pwc_own_trill;
             acc_disc_sor.pwc_dom_count := acc_level_param_sor.pwc_dom_count;
             acc_disc_sor.pwc_dom_trill := acc_level_param_sor.pwc_dom_trill;
             acc_disc_sor.pwc_egt_count := acc_level_param_sor.pwc_egt_count;
             acc_disc_sor.pwc_egt_trill := acc_level_param_sor.pwc_egt_trill;
             acc_disc_sor.pwc_wrl_count := acc_level_param_sor.pwc_wrl_count;
             acc_disc_sor.pwc_egt_trill := acc_level_param_sor.pwc_wrl_trill;
             acc_disc_sor.dload         := 1;
             acc_disc_sor.created_date  := p_sysdate;
                      
             insert into ACC_LEVEL_DISCOUNTS values acc_disc_sor;
             commit;
          end;  
        end if;            
      END LOOP; 
    
      --Kártya alapu kedvezmény
      FOR dwh_sor in cur_dwh_crd LOOP
          
          select count(*) into db from CARD_LEVEL_PARAM  crp 
          where trim(crp.ktg_code) = trim(dwh_sor.ktgkod)
          and  p_sysdate between crp.sdate and crp.vdate;
                
          if db = 1 then begin
                  
             select * into card_level_param_sor from CARD_LEVEL_PARAM  crp 
             where trim(crp.ktg_code) = trim(dwh_sor.ktgkod)
             and  p_sysdate between crp.sdate and crp.vdate
             order by crp.vdate desc
             offset 0 rows fetch next 1 rows only;
         
             card_disc_sor.crd_contract_id := dwh_sor.crd_contract_id;
             card_disc_sor.ktg_code        := trim(dwh_sor.ktgkod);              
             card_disc_sor.tr_all        := card_level_param_sor.tr_all;
             card_disc_sor.atm_all       := card_level_param_sor.atm_all;
             card_disc_sor.atm_own_count := card_level_param_sor.atm_own_count;
             card_disc_sor.atm_own_trill := card_level_param_sor.atm_own_trill;
             card_disc_sor.atm_dom_count := card_level_param_sor.atm_dom_count;
             card_disc_sor.atm_dom_trill := card_level_param_sor.atm_dom_trill;
             card_disc_sor.atm_egt_count := card_level_param_sor.atm_egt_count;
             card_disc_sor.atm_egt_trill := card_level_param_sor.atm_egt_trill;
             card_disc_sor.atm_wrl_count := card_level_param_sor.atm_wrl_count;
             card_disc_sor.atm_wrl_trill := card_level_param_sor.atm_wrl_trill;
             card_disc_sor.pos_all       := card_level_param_sor.pos_all;
             card_disc_sor.pos_own_count := card_level_param_sor.pos_own_count;
             card_disc_sor.pos_own_trill := card_level_param_sor.pos_own_trill;
             card_disc_sor.pos_dom_count := card_level_param_sor.pos_dom_count;
             card_disc_sor.pos_dom_trill := card_level_param_sor.pos_dom_trill;
             card_disc_sor.pos_egt_count := card_level_param_sor.pos_egt_count;
             card_disc_sor.pos_egt_trill := card_level_param_sor.pos_egt_trill;
             card_disc_sor.pos_wrl_count := card_level_param_sor.pos_wrl_count;
             card_disc_sor.pos_wrl_trill := card_level_param_sor.pos_wrl_trill;
             card_disc_sor.pwc_all       := card_level_param_sor.pwc_all;
             card_disc_sor.pwc_own_count := card_level_param_sor.pwc_own_count;
             card_disc_sor.pwc_own_trill := card_level_param_sor.pwc_own_trill;
             card_disc_sor.pwc_dom_count := card_level_param_sor.pwc_dom_count;
             card_disc_sor.pwc_dom_trill := card_level_param_sor.pwc_dom_trill;
             card_disc_sor.pwc_egt_count := card_level_param_sor.pwc_egt_count;
             card_disc_sor.pwc_egt_trill := card_level_param_sor.pwc_egt_trill;
             card_disc_sor.pwc_wrl_count := card_level_param_sor.pwc_wrl_count;
             card_disc_sor.pwc_egt_trill := card_level_param_sor.pwc_wrl_trill;  
             card_disc_sor.dload         := 1;              
             card_disc_sor.created_date  := p_sysdate;
                
             insert into CARD_LEVEL_DISCOUNTS values card_disc_sor;
             commit;
             
          end;
        end if;
      END LOOP; 
    
      return 1;
  end;
  
  function check_discount(trx_amt number, 
                        trx_currency varchar2, 
                        trx_date date, 
                        acc_currency varchar2, 
                        ktg_codes varchar2,
                        circle_type varchar2, 
                        event_type varchar2, 
                        trx_pan varchar2,
                        full_tr_fees OUT number) return number is
     
     hiba number := 0;
     db number := 0; 
     retval number;                       
     tmp_circle_type varchar2(5);
     tmp_event_type varchar2(5);
     tmp_amount number;
     tmp_full_tr_fees number;
     tmp_disc_tr_fees number;
     tmp_evt varchar2(5);
     ineventtype boolean;
     tmp_pan varchar2(19);
     tmp_calc_method number := -1;
     tmp_rule number;
     tmp_efect_date_code Date;
     tmp_efect_date_rule Date;
     tmp_kedv number;
     tmp_trill varchar2(1);
               
     begin
      select nvl((select 'true' from dual where Trim(event_type) not in (SELECT Trim(CTCODE) FROM CODE_TABLE WHERE Trim(CODETYPE) ='EVENT_TYPE')),'false') into tmp_evt from dual;
      case upper(tmp_evt) 
        when 'TRUE' then ineventtype := true;
        when 'FALSE' then ineventtype := false;
        else ineventtype := null;
      end case;
      
      --  Paraméterek ellenőrzése
      
      if (trx_amt is null) or
         (trx_currency not in ('840','978','348','756','826') or trx_currency is null) or
         (trunc(trx_date) > trunc(sysdate) or trx_date is null) or
         (acc_currency not in ('840','978','348','756','826') or acc_currency is null) or
         (ktg_codes is null) or
         (circle_type not in ('OWN','TSZ','BHM','BHV','DOM','VDM','EUR','WRL','VER','VWL','EGM','EGV') or circle_type is null) or
         (ineventtype or event_type is null) or
         (trx_pan is null)
         then hiba := 1;
      end if; 

      
      -- Kártya kikeresésse EM_DWH-ból és eldöntetni hogy számla vagy kártya szerinti a kedvezmény
      select * into em_dwh_sor from em_dwh dwh where trim(dwh.pan) = trim(trx_pan);
      select count(*) into db from acc_level_rule lr where trim(lr.hirkod) = trim(em_dwh_sor.hirdkod) 
      and trunc(trx_date) between trunc(lr.vdstart) and trunc(lr.vdend);
      
      if hiba = 0 then begin
          if db != 0 then begin
              -- Számla szerinti kedvezmény
              select * into acc_disc_sor from acc_level_discounts acd where acd.acc_num_24 = em_dwh_sor.acc_num_24 
              and trim(acd.hirkod) = trim(em_dwh_sor.hirdkod)
              and acd.dload = 1;
            
              case when event_type = 'ATM' then 
                begin
                  -- Saját körös ATM
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := acc_disc_sor.atm_own_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.atm_all > 0
                        and acc_disc_sor.atm_own_count > 0 
                        --Van ATM OWN még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.atm_own_count := acc_disc_sor.atm_own_count -1;
                          acc_disc_sor.atm_all       := acc_disc_sor.atm_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.atm_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM OWN kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.atm_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := acc_disc_sor.atm_dom_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.atm_all > 0
                        and acc_disc_sor.atm_dom_count > 0 
                        --Van ATM DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.atm_dom_count := acc_disc_sor.atm_dom_count -1;
                          acc_disc_sor.atm_all       := acc_disc_sor.atm_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.atm_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM DOM kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.atm_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV') then
                    begin
                      tmp_trill := acc_disc_sor.atm_egt_trill; 
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.atm_all > 0
                        and acc_disc_sor.atm_egt_count > 0 
                        --Van ATM EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.atm_egt_count := acc_disc_sor.atm_egt_count -1;
                          acc_disc_sor.atm_all       := acc_disc_sor.atm_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.atm_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM EGT kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.atm_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := acc_disc_sor.atm_wrl_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.atm_all > 0
                        and acc_disc_sor.atm_wrl_count > 0 
                        --Van ATM WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.atm_wrl_count := acc_disc_sor.atm_wrl_count -1;
                          acc_disc_sor.atm_all       := acc_disc_sor.atm_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.atm_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM WRL kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.atm_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end;
              when event_type = 'POS' then 
                begin
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := acc_disc_sor.pos_own_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pos_all > 0
                        and acc_disc_sor.pos_own_count > 0 
                        --Van POS OWN még kedvezmény                       
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pos_own_count := acc_disc_sor.pos_own_count -1;
                          acc_disc_sor.pos_all       := acc_disc_sor.pos_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pos_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS OWN kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pos_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := acc_disc_sor.pos_dom_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pos_all > 0
                        and acc_disc_sor.pos_dom_count > 0 
                        --Van POS DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pos_dom_count := acc_disc_sor.pos_dom_count -1;
                          acc_disc_sor.pos_all       := acc_disc_sor.pos_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pos_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS DOM kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pos_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV')then
                    begin
                      tmp_trill := acc_disc_sor.pos_egt_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pos_all > 0
                        and acc_disc_sor.pos_egt_count > 0 
                        --Van POS EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pos_egt_count := acc_disc_sor.pos_egt_count -1;
                          acc_disc_sor.pos_all       := acc_disc_sor.pos_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pos_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS EGT kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pos_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := acc_disc_sor.pos_wrl_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pos_all > 0
                        and acc_disc_sor.pos_wrl_count > 0 
                        --Van POS WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pos_wrl_count := acc_disc_sor.pos_wrl_count -1;
                          acc_disc_sor.pos_all       := acc_disc_sor.pos_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pos_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS WRL kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pos_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end;
              when event_type = 'PWC' then 
                begin
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := acc_disc_sor.pwc_own_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pwc_all > 0
                        and acc_disc_sor.pwc_own_count > 0 
                        --Van PWC OWN még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pwc_own_count := acc_disc_sor.pwc_own_count -1;
                          acc_disc_sor.pwc_all       := acc_disc_sor.pwc_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pwc_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC OWN kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pwc_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := acc_disc_sor.pwc_dom_trill; 
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pwc_all > 0
                        and acc_disc_sor.pwc_dom_count > 0 
                        --Van PWC DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pwc_dom_count := acc_disc_sor.pwc_dom_count -1;
                          acc_disc_sor.pwc_all       := acc_disc_sor.pwc_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pwc_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC DOM kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pwc_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV') then
                    begin
                      tmp_trill := acc_disc_sor.pwc_egt_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pwc_all > 0
                        and acc_disc_sor.pwc_egt_count > 0 
                        --Van PWC EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pwc_egt_count := acc_disc_sor.pwc_egt_count -1;
                          acc_disc_sor.pwc_all       := acc_disc_sor.pwc_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pwc_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC EGT kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pwc_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := acc_disc_sor.pwc_wrl_trill;
                      if acc_disc_sor.tr_all > 0 and acc_disc_sor.pwc_all > 0
                        and acc_disc_sor.pwc_wrl_count > 0 
                        --Van PWC WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          acc_disc_sor.pwc_wrl_count := acc_disc_sor.pwc_wrl_count -1;
                          acc_disc_sor.pwc_all       := acc_disc_sor.pwc_all -1;
                          acc_disc_sor.tr_all        := acc_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_acc_disc_sor := set_acc_level_discount(acc_disc_sor);                          
                          -- Tranzakcios illeték
                          if acc_disc_sor.pwc_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC WRL kedvezmény de a trill még vizsgálni kell
                          if acc_disc_sor.pwc_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end; 
                --else begin
                  -- nem ATM POS PWC az event type
                  
                --end;   
               end case;
               tmp_disc_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                       trx_currency,
                                                       trx_date,
                                                       acc_currency,
                                                       ktg_codes,
                                                       circle_type,
                                                       event_type,
                                                       tmp_calc_method,
                                                       tmp_rule,
                                                       tmp_efect_date_code,
                                                       tmp_efect_date_rule);
                                                       
                if tmp_kedv = 1 then
                   --ha volt kedvezménys dij akkor kell a full dij is
                   if tmp_trill = 'N' 
                     then tmp_full_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                               trx_currency,
                                                               trx_date,
                                                               acc_currency,
                                                               ktg_codes,--ewh_sor-bol
                                                               circle_type,
                                                               event_type,
                                                               0,
                                                               tmp_rule,
                                                               tmp_efect_date_code,
                                                               tmp_efect_date_rule);
                      else tmp_full_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                               trx_currency,
                                                               trx_date,
                                                               acc_currency,
                                                               ktg_codes,--ewh_sor-bol
                                                               circle_type,
                                                               event_type,
                                                               3,
                                                               tmp_rule,
                                                               tmp_efect_date_code,
                                                               tmp_efect_date_rule);                                        
                    end if;                                                                                        
                end if;
                if tmp_kedv = 1 
                   then full_tr_fees :=  tmp_full_tr_fees;
                   else full_tr_fees :=  tmp_disc_tr_fees;
                end if;
                
                if (acc_currency = '348')
                   then retval := round(tmp_disc_tr_fees,0);
                   else retval := round(tmp_disc_tr_fees,2);
                end if;                                            
             end;
             if retval <> -1 then
               begin
                 update acc_level_discounts acl set acl.acc_num_24 = tmp_acc_disc_sor.acc_num_24,                
                                                acl.hirkod = tmp_acc_disc_sor.hirkod,
                                                acl.tr_all = tmp_acc_disc_sor.tr_all,
                                                acl.atm_all = tmp_acc_disc_sor.atm_all,
                                                acl.atm_own_count = tmp_acc_disc_sor.atm_own_count,
                                                acl.atm_own_trill = tmp_acc_disc_sor.atm_own_trill,
                                                acl.atm_dom_count = tmp_acc_disc_sor.atm_dom_count,
                                                acl.atm_dom_trill = tmp_acc_disc_sor.atm_dom_trill,
                                                acl.atm_egt_count = tmp_acc_disc_sor.atm_egt_count,
                                                acl.atm_egt_trill = tmp_acc_disc_sor.atm_egt_trill,
                                                acl.atm_wrl_count = tmp_acc_disc_sor.atm_wrl_count,
                                                acl.atm_wrl_trill = tmp_acc_disc_sor.atm_wrl_trill,
                                                acl.pos_all = tmp_acc_disc_sor.pos_all,
                                                acl.pos_own_count = tmp_acc_disc_sor.pos_own_count,
                                                acl.pos_own_trill = tmp_acc_disc_sor.pos_own_trill,
                                                acl.pos_dom_count = tmp_acc_disc_sor.pos_dom_count,
                                                acl.pos_dom_trill = tmp_acc_disc_sor.pos_dom_trill,
                                                acl.pos_egt_count = tmp_acc_disc_sor.pos_egt_count,
                                                acl.pos_egt_trill = tmp_acc_disc_sor.pos_egt_trill,
                                                acl.pos_wrl_count = tmp_acc_disc_sor.pos_wrl_count,
                                                acl.pos_wrl_trill = tmp_acc_disc_sor.pos_wrl_trill,
                                                acl.pwc_all = tmp_acc_disc_sor.pwc_all,
                                                acl.pwc_own_count = tmp_acc_disc_sor.pwc_own_count,
                                                acl.pwc_own_trill = tmp_acc_disc_sor.pwc_own_trill,
                                                acl.pwc_dom_count = tmp_acc_disc_sor.pwc_dom_count,
                                                acl.pwc_dom_trill = tmp_acc_disc_sor.pos_dom_trill,
                                                acl.pwc_egt_count = tmp_acc_disc_sor.pwc_egt_count,
                                                acl.pwc_egt_trill = tmp_acc_disc_sor.pwc_egt_trill,
                                                acl.pwc_wrl_count = tmp_acc_disc_sor.pwc_wrl_count,
                                                acl.pwc_wrl_trill = tmp_acc_disc_sor.pwc_wrl_trill,
                                                acl.dload         = tmp_acc_disc_sor.dload,
                                                acl.created_date  = tmp_acc_disc_sor.created_date
                                                where acl.acc_num_24 = tmp_acc_disc_sor.acc_num_24;
                commit;
              end;
              else rollback;
             end if;  
            else begin
              -- Kártya szerinti kedvezmény
              select * into card_disc_sor from card_level_discounts cad where trim(cad.crd_contract_id) = trim(em_dwh_sor.crd_contract_id) 
              and trim(cad.ktg_code) = trim(em_dwh_sor.ktgkod)
              and cad.dload = 1;
              
              case when event_type = 'ATM' then 
                begin
                  -- Saját körös ATM
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := card_disc_sor.atm_own_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.atm_all > 0
                        and card_disc_sor.atm_own_count > 0 
                        --Van ATM OWN még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.atm_own_count := card_disc_sor.atm_own_count -1;
                          card_disc_sor.atm_all       := card_disc_sor.atm_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.atm_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM OWN kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.atm_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := card_disc_sor.atm_dom_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.atm_all > 0
                        and card_disc_sor.atm_dom_count > 0 
                        --Van ATM DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.atm_dom_count := card_disc_sor.atm_dom_count -1;
                          card_disc_sor.atm_all       := card_disc_sor.atm_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.atm_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM DOM kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.atm_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV') then
                    begin
                      tmp_trill := card_disc_sor.atm_egt_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.atm_all > 0
                        and card_disc_sor.atm_egt_count > 0 
                        --Van ATM EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.atm_egt_count := card_disc_sor.atm_egt_count -1;
                          card_disc_sor.atm_all       := card_disc_sor.atm_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.atm_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM EGT kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.atm_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := card_disc_sor.atm_wrl_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.atm_all > 0
                        and card_disc_sor.atm_wrl_count > 0 
                        --Van ATM WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.atm_wrl_count := card_disc_sor.atm_wrl_count -1;
                          card_disc_sor.atm_all       := card_disc_sor.atm_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.atm_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már ATM WRL kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.atm_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end;
              when event_type = 'POS' then 
                begin
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := card_disc_sor.pos_own_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pos_all > 0
                        and card_disc_sor.pos_own_count > 0 
                        --Van POS OWN még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pos_own_count := card_disc_sor.pos_own_count -1;
                          card_disc_sor.pos_all       := card_disc_sor.pos_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pos_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS OWN kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pos_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := card_disc_sor.pos_dom_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pos_all > 0
                        and card_disc_sor.pos_dom_count > 0 
                        --Van POS DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pos_dom_count := card_disc_sor.pos_dom_count -1;
                          card_disc_sor.pos_all       := card_disc_sor.pos_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pos_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS DOM kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pos_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV') then
                    begin
                      tmp_trill := card_disc_sor.pos_egt_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pos_all > 0
                        and card_disc_sor.pos_egt_count > 0 
                        --Van POS EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pos_egt_count := card_disc_sor.pos_egt_count -1;
                          card_disc_sor.pos_all       := card_disc_sor.pos_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pos_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS EGT kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pos_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := card_disc_sor.pos_wrl_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pos_all > 0
                        and card_disc_sor.pos_wrl_count > 0 
                        --Van POS WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pos_wrl_count := card_disc_sor.pos_wrl_count -1;
                          card_disc_sor.pos_all       := card_disc_sor.pos_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pos_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már POS WRL kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pos_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end;
              when event_type = 'PWC' then 
                begin
                  case when circle_type in('OWN','TSZ','BHV','BHM') then
                    begin
                      tmp_trill := card_disc_sor.pwc_own_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pwc_all > 0
                        and card_disc_sor.pwc_own_count > 0 
                        --Van PWC OWN még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pwc_own_count := card_disc_sor.pwc_own_count -1;
                          card_disc_sor.pwc_all       := card_disc_sor.pwc_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pwc_own_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC OWN kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pwc_own_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('DOM','VDM') then
                    begin
                      tmp_trill := card_disc_sor.pwc_dom_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pwc_all > 0
                        and card_disc_sor.pwc_dom_count > 0 
                        --Van PWC DOM még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pwc_dom_count := card_disc_sor.pwc_dom_count -1;
                          card_disc_sor.pwc_all       := card_disc_sor.pwc_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pwc_dom_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC DOM kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pwc_dom_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in ('EGM','EGV') then
                    begin
                      tmp_trill := card_disc_sor.pwc_egt_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pwc_all > 0
                        and card_disc_sor.pwc_egt_count > 0 
                        --Van PWC EGT még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pwc_egt_count := card_disc_sor.pwc_egt_count -1;
                          card_disc_sor.pwc_all       := card_disc_sor.pwc_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pwc_egt_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC EGT kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pwc_egt_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  when circle_type in('WRL','VWL','EUR','VER') then
                    begin
                      tmp_trill := card_disc_sor.pwc_wrl_trill;
                      if card_disc_sor.tr_all > 0 and card_disc_sor.pwc_all > 0
                        and card_disc_sor.pwc_wrl_count > 0 
                        --Van PWC WRL még kedvezmény
                        then begin
                          tmp_kedv := 1;
                          card_disc_sor.pwc_wrl_count := card_disc_sor.pwc_wrl_count -1;
                          card_disc_sor.pwc_all       := card_disc_sor.pwc_all -1;
                          card_disc_sor.tr_all        := card_disc_sor.tr_all -1;
                          -- Kevezmények beállitása
                          tmp_card_disc_sor := set_card_level_discount(card_disc_sor);                          
                          -- Tranzakcios illeték
                          if card_disc_sor.pwc_wrl_trill = 'N'
                            then tmp_calc_method := 1; 
                            else tmp_calc_method := 2;
                          end if;        
                        end;
                        else begin
                          --Nincs már PWC WRL kedvezmény de a trill még vizsgálni kell
                          if card_disc_sor.pwc_wrl_trill = 'N'
                            then tmp_calc_method := 3; 
                            else tmp_calc_method := 0;
                          end if;  
                        end;
                      end if;
                    end;
                  end case;  
                end; 
                --else begin
                  -- nem ATM POS PWC az event type
                  
                --end;   
               end case;
               
               tmp_disc_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                       trx_currency,
                                                       trx_date,
                                                       acc_currency,
                                                       ktg_codes,
                                                       circle_type,
                                                       event_type,
                                                       tmp_calc_method,
                                                       tmp_rule,
                                                       tmp_efect_date_code,
                                                       tmp_efect_date_rule);
                                                       
                if tmp_kedv = 1 then
                   --ha volt kedvezménys dij akkor kell a full dij is
                   if tmp_trill = 'N' 
                      then tmp_full_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                       trx_currency,
                                                       trx_date,
                                                       acc_currency,
                                                       ktg_codes,
                                                       circle_type,
                                                       event_type,
                                                       0,
                                                       tmp_rule,
                                                       tmp_efect_date_code,
                                                       tmp_efect_date_rule);
                       else tmp_full_tr_fees := em_tr_fees_calc_new(trx_amt,
                                                       trx_currency,
                                                       trx_date,
                                                       acc_currency,
                                                       ktg_codes,
                                                       circle_type,
                                                       event_type,
                                                       3,
                                                       tmp_rule,
                                                       tmp_efect_date_code,
                                                       tmp_efect_date_rule);                                
                   end if;                                             
                end if;
                
                if tmp_kedv = 1 
                   then full_tr_fees :=  tmp_full_tr_fees;
                   else full_tr_fees :=  tmp_disc_tr_fees;
                end if;
                
                if (acc_currency = '348')
                   then retval := round(tmp_disc_tr_fees,0);
                   else retval := round(tmp_disc_tr_fees,2);
                end if;                                            
             
             if retval <> -1 then
                     begin
                       update card_level_discounts cal set cal.crd_contract_id = tmp_card_disc_sor.crd_contract_id,                
                              cal.ktg_code = tmp_card_disc_sor.ktg_code,
                              cal.tr_all = tmp_card_disc_sor.tr_all,
                              cal.atm_all = tmp_card_disc_sor.atm_all,
                              cal.atm_own_count = tmp_card_disc_sor.atm_own_count,
                              cal.atm_own_trill = tmp_card_disc_sor.atm_own_trill,
                              cal.atm_dom_count = tmp_card_disc_sor.atm_dom_count,
                              cal.atm_dom_trill = tmp_card_disc_sor.atm_dom_trill,
                              cal.atm_egt_count = tmp_card_disc_sor.atm_egt_count,
                              cal.atm_egt_trill = tmp_card_disc_sor.atm_egt_trill,
                              cal.atm_wrl_count = tmp_card_disc_sor.atm_wrl_count,
                              cal.atm_wrl_trill = tmp_card_disc_sor.atm_wrl_trill,
                              cal.pos_all = tmp_card_disc_sor.pos_all,
                              cal.pos_own_count = tmp_card_disc_sor.pos_own_count,
                              cal.pos_own_trill = tmp_card_disc_sor.pos_own_trill,
                              cal.pos_dom_count = tmp_card_disc_sor.pos_dom_count,
                              cal.pos_dom_trill = tmp_card_disc_sor.pos_dom_trill,
                              cal.pos_egt_count = tmp_card_disc_sor.pos_egt_count,
                              cal.pos_egt_trill = tmp_card_disc_sor.pos_egt_trill,
                              cal.pos_wrl_count = tmp_card_disc_sor.pos_wrl_count,
                              cal.pos_wrl_trill = tmp_card_disc_sor.pos_wrl_trill,
                              cal.pwc_all = tmp_card_disc_sor.pwc_all,
                              cal.pwc_own_count = tmp_card_disc_sor.pwc_own_count,
                              cal.pwc_own_trill = tmp_card_disc_sor.pwc_own_trill,
                              cal.pwc_dom_count = tmp_card_disc_sor.pwc_dom_count,
                              cal.pwc_dom_trill = tmp_card_disc_sor.pos_dom_trill,
                              cal.pwc_egt_count = tmp_card_disc_sor.pwc_egt_count,
                              cal.pwc_egt_trill = tmp_card_disc_sor.pwc_egt_trill,
                              cal.pwc_wrl_count = tmp_card_disc_sor.pwc_wrl_count,
                              cal.pwc_wrl_trill = tmp_card_disc_sor.pwc_wrl_trill,
                              cal.dload         = tmp_card_disc_sor.dload,
                              cal.created_date  = tmp_card_disc_sor.created_date
                              where cal.crd_contract_id = tmp_card_disc_sor.crd_contract_id
                              and cal.ktg_code = tmp_card_disc_sor.ktg_code;                   
                         commit;
                     end;
                     else rollback;
                 end if;
              
              
            end;
          end if;  
        end;
      end if;
      
      return retval;
    
  end;
  
  function set_acc_level_discount(par_acc_disc_sor ACC_LEVEL_DISCOUNTS%rowtype) return ACC_LEVEL_DISCOUNTS%rowtype is
  w_acc_disc_sor   ACC_LEVEL_DISCOUNTS%rowtype;
  begin 
     w_acc_disc_sor := par_acc_disc_sor;
     if par_acc_disc_sor.tr_all < par_acc_disc_sor.atm_all 
       then  w_acc_disc_sor.atm_all := par_acc_disc_sor.tr_all; 
     end if; 
     if par_acc_disc_sor.tr_all < par_acc_disc_sor.pos_all 
       then  w_acc_disc_sor.pos_all := par_acc_disc_sor.tr_all; 
     end if;
     if par_acc_disc_sor.tr_all < par_acc_disc_sor.pwc_all 
       then  w_acc_disc_sor.pwc_all := par_acc_disc_sor.tr_all; 
     end if;
     
     if par_acc_disc_sor.atm_all < par_acc_disc_sor.atm_own_count 
       then  w_acc_disc_sor.atm_own_count := par_acc_disc_sor.atm_all; 
     end if;
     if par_acc_disc_sor.atm_all < par_acc_disc_sor.atm_dom_count 
       then  w_acc_disc_sor.atm_dom_count := par_acc_disc_sor.atm_all; 
     end if;
     if par_acc_disc_sor.atm_all < par_acc_disc_sor.atm_egt_count 
       then  w_acc_disc_sor.atm_egt_count := par_acc_disc_sor.atm_all; 
     end if;
     if par_acc_disc_sor.atm_all < par_acc_disc_sor.atm_wrl_count 
       then  w_acc_disc_sor.atm_wrl_count := par_acc_disc_sor.atm_all; 
     end if;
     
     if par_acc_disc_sor.pos_all < par_acc_disc_sor.pos_own_count 
       then  w_acc_disc_sor.pos_own_count := par_acc_disc_sor.pos_all; 
     end if;
     if par_acc_disc_sor.pos_all < par_acc_disc_sor.pos_dom_count 
       then  w_acc_disc_sor.pos_dom_count := par_acc_disc_sor.pos_all; 
     end if;
     if par_acc_disc_sor.pos_all < par_acc_disc_sor.pos_egt_count 
       then  w_acc_disc_sor.pos_egt_count := par_acc_disc_sor.pos_all; 
     end if;
     if par_acc_disc_sor.pos_all < par_acc_disc_sor.pos_wrl_count 
       then  w_acc_disc_sor.pos_wrl_count := par_acc_disc_sor.pos_all; 
     end if;
     
     if par_acc_disc_sor.pwc_all < par_acc_disc_sor.pwc_own_count 
       then  w_acc_disc_sor.pwc_own_count := par_acc_disc_sor.pwc_all; 
     end if;
     if par_acc_disc_sor.pwc_all < par_acc_disc_sor.pwc_dom_count 
       then  w_acc_disc_sor.pwc_dom_count := par_acc_disc_sor.pwc_all; 
     end if;
     if par_acc_disc_sor.pwc_all < par_acc_disc_sor.pwc_egt_count 
       then  w_acc_disc_sor.pwc_egt_count := par_acc_disc_sor.pwc_all; 
     end if;
     if par_acc_disc_sor.pwc_all < par_acc_disc_sor.pwc_wrl_count 
       then  w_acc_disc_sor.pwc_wrl_count := par_acc_disc_sor.pwc_all; 
     end if;
     
     return w_acc_disc_sor; 
  
  end;
    
  function set_card_level_discount(par_card_disc_sor CARD_LEVEL_DISCOUNTS%rowtype) return CARD_LEVEL_DISCOUNTS%rowtype is
  w_card_disc_sor   CARD_LEVEL_DISCOUNTS%rowtype;
  begin 
     w_card_disc_sor := par_card_disc_sor;
     if par_card_disc_sor.tr_all < par_card_disc_sor.atm_all 
       then  w_card_disc_sor.atm_all := par_card_disc_sor.tr_all; 
     end if; 
     if par_card_disc_sor.tr_all < par_card_disc_sor.pos_all 
       then  w_card_disc_sor.pos_all := par_card_disc_sor.tr_all; 
     end if;
     if par_card_disc_sor.tr_all < par_card_disc_sor.pwc_all 
       then  w_card_disc_sor.pwc_all := par_card_disc_sor.tr_all; 
     end if;
     
     if par_card_disc_sor.atm_all < par_card_disc_sor.atm_own_count 
       then  w_card_disc_sor.atm_own_count := par_card_disc_sor.atm_all; 
     end if;
     if par_card_disc_sor.atm_all < par_card_disc_sor.atm_dom_count 
       then  w_card_disc_sor.atm_dom_count := par_card_disc_sor.atm_all; 
     end if;
     if par_card_disc_sor.atm_all < par_card_disc_sor.atm_egt_count 
       then  w_card_disc_sor.atm_egt_count := par_card_disc_sor.atm_all; 
     end if;
     if par_card_disc_sor.atm_all < par_card_disc_sor.atm_wrl_count 
       then  w_card_disc_sor.atm_wrl_count := par_card_disc_sor.atm_all; 
     end if;
     
     if par_card_disc_sor.pos_all < par_card_disc_sor.pos_own_count 
       then  w_card_disc_sor.pos_own_count := par_card_disc_sor.pos_all; 
     end if;
     if par_card_disc_sor.pos_all < par_card_disc_sor.pos_dom_count 
       then  w_card_disc_sor.pos_dom_count := par_card_disc_sor.pos_all; 
     end if;
     if par_card_disc_sor.pos_all < par_card_disc_sor.pos_egt_count 
       then  w_card_disc_sor.pos_egt_count := par_card_disc_sor.pos_all; 
     end if;
     if par_card_disc_sor.pos_all < par_card_disc_sor.pos_wrl_count 
       then  w_card_disc_sor.pos_wrl_count := par_card_disc_sor.pos_all; 
     end if;
     
     if par_card_disc_sor.pwc_all < par_card_disc_sor.pwc_own_count 
       then  w_card_disc_sor.pwc_own_count := par_card_disc_sor.pwc_all; 
     end if;
     if par_card_disc_sor.pwc_all < par_card_disc_sor.pwc_dom_count 
       then  w_card_disc_sor.pwc_dom_count := par_card_disc_sor.pwc_all; 
     end if;
     if par_card_disc_sor.pwc_all < par_card_disc_sor.pwc_egt_count 
       then  w_card_disc_sor.pwc_egt_count := par_card_disc_sor.pwc_all; 
     end if;
     if par_card_disc_sor.pwc_all < par_card_disc_sor.pwc_wrl_count 
       then  w_card_disc_sor.pwc_wrl_count := par_card_disc_sor.pwc_all; 
     end if;
     
     return w_card_disc_sor; 
  
  end;
  
  function set_acc_and_crd_disc_dload(par_pan varchar2) return number is
    db number;
    begin
      
      -- Kártya kikeresésse EM_DWH-ból és eldöntetni hogy számla vagy kártya szerinti a kedvezmény
      select * into em_dwh_sor from em_dwh dwh where trim(dwh.pan) = trim(par_pan);
      select count(*) into db from acc_level_rule lr where trim(lr.hirkod) = trim(em_dwh_sor.hirdkod) 
      and trunc(sysdate()) between trunc(lr.vdstart) and trunc(lr.vdend);
      
      if db != 0 then begin
         -- Számla szerinti kedvezmény
         update acc_level_discounts acd set acd.dload = 7 
         where acd.acc_num_24 = em_dwh_sor.acc_num_24 
         and trim(acd.hirkod) = trim(em_dwh_sor.hirdkod)
         and acd.dload = 1;
       end; 
       else begin
         -- Kártya szerinti kedvezmény
         update card_level_discounts cad set cad.dload = 7
         where trim(cad.crd_contract_id) = trim(em_dwh_sor.crd_contract_id) 
         and trim(cad.ktg_code) = trim(em_dwh_sor.ktgkod)
         and cad.dload = 1; 
       end; 
      end if;
      commit;
      return 1;
  end;  
  
  function archiv_acc_and_crd_disc(par_sysdate date) return number is
    begin
      insert into h_acc_level_discounts 
      select ads.*, (select to_char(par_sysdate,'yyyymm') as evho from dual) from acc_level_discounts ads;
                                   
      insert into h_card_level_discounts 
      select crd.*, (select to_char(par_sysdate,'yyyymm') as evho from dual) from card_level_discounts crd;
      commit;         
      return 1;
  end;
  
  function daily_check_hirdkod_ktgcode(p_sysdate date) return number is
    cursor cur_acc_disc is
      select * from acc_level_discounts acc;   
             
    cursor cur_card_disc is
      select * from card_level_discounts card;
  
    acc_disc_sor         ACC_LEVEL_DISCOUNTS%rowtype;
    card_disc_sor        CARD_LEVEL_DISCOUNTS%rowtype; 
    db integer;
  begin
     -- Számla alapu kedvezmény
      FOR acc_disc_sor in cur_acc_disc LOOP
          
          select count(*) into db from ACC_LEVEL_PARAM  acp 
          where trim(acp.hirkod) = trim(acc_disc_sor.hirkod)
          and  p_sysdate between acp.sdate and acp.vdate;
          
          if db = 0 
            then begin 
              update acc_level_discounts acd set acd.dload = 6 
              where acd.acc_num_24 = acc_disc_sor.acc_num_24 
              and trim(acd.hirkod) = trim(acc_disc_sor.hirkod)
              and acd.dload = 1; 
              commit;
            end;
          end if;
      END LOOP;    
      
      --Kártya alapu kedvezmény
      FOR card_disc_sor in cur_card_disc LOOP
          
          select count(*) into db from CARD_LEVEL_PARAM  crp 
          where trim(crp.ktg_code) = trim(card_disc_sor.ktg_code)
          and  p_sysdate between crp.sdate and crp.vdate;
                
          if db = 0 
            then begin
              update card_level_discounts cad set cad.dload = 6
              where trim(cad.crd_contract_id) = trim(card_disc_sor.crd_contract_id) 
              and trim(cad.ktg_code) = trim(card_disc_sor.ktg_code)
              and cad.dload = 1;
              commit;
            end;
          end if;
      END LOOP;
      return 1;
  end;
  
  function daily_load_card_and_acc_disc(p_sysdate date) return number is
  
    db integer;
    d number;
  
   cursor cur_dwh_acc is
      select  distinct dwh.hirdkod, dwh.acc_num_24
             from EM_DWH dwh
             join ACC_LEVEL_RULE al on al.hirkod = dwh.hirdkod and p_sysdate between al.vdstart and al.vdend
             where dwh.crd_status in ('0','1','C')
             and dwh.crd_seq_num = '999'
             and dwh.agent1 = '504'
      Minus
      select acc.hirkod as hirdkod, acc.acc_num_24 from acc_level_discounts acc;
             
    cursor cur_dwh_crd is
      select distinct dwh.ktgkod, dwh.crd_contract_id
             from EM_DWH dwh
             where dwh.crd_status in ('0','1','C')
             and dwh.crd_seq_num = '999'
             and (trim(dwh.hirdkod) not in(select trim(al.hirkod) from ACC_LEVEL_RULE al) or dwh.hirdkod is null)
      Minus
      select crd.ktg_code, to_number(crd.crd_contract_id) from card_level_discounts crd;
  
    acc_disc_sor         ACC_LEVEL_DISCOUNTS%rowtype;
    card_disc_sor        CARD_LEVEL_DISCOUNTS%rowtype;
    acc_level_param_sor  ACC_LEVEL_PARAM%rowtype;
    card_level_param_sor CARD_LEVEL_PARAM%rowtype;
  
    begin
      
      
      -- Számla alapu kedvezmény
      FOR dwh_sor in cur_dwh_acc LOOP
          
          select count(*) into db from ACC_LEVEL_PARAM  acp 
          where trim(acp.hirkod) = trim(dwh_sor.hirdkod)
          and  p_sysdate between acp.sdate and acp.vdate;
          
          if db != 0 then begin
                  
             select * into acc_level_param_sor from ACC_LEVEL_PARAM  acp 
             where trim(acp.hirkod) = trim(dwh_sor.hirdkod)
             and  p_sysdate between acp.sdate and acp.vdate
             order by acp.vdate desc
             offset 0 rows fetch next 1 rows only;
                        
             acc_disc_sor.acc_num_24    := dwh_sor.acc_num_24;
             acc_disc_sor.hirkod        := dwh_sor.hirdkod;     
             acc_disc_sor.tr_all        := acc_level_param_sor.tr_all;
             acc_disc_sor.atm_all       := acc_level_param_sor.atm_all;
             acc_disc_sor.atm_own_count := acc_level_param_sor.atm_own_count;
             acc_disc_sor.atm_own_trill := acc_level_param_sor.atm_own_trill;
             acc_disc_sor.atm_dom_count := acc_level_param_sor.atm_dom_count;
             acc_disc_sor.atm_dom_trill := acc_level_param_sor.atm_dom_trill;
             acc_disc_sor.atm_egt_count := acc_level_param_sor.atm_egt_count;
             acc_disc_sor.atm_egt_trill := acc_level_param_sor.atm_egt_trill;
             acc_disc_sor.atm_wrl_count := acc_level_param_sor.atm_wrl_count;
             acc_disc_sor.atm_wrl_trill := acc_level_param_sor.atm_wrl_trill;
             acc_disc_sor.pos_all       := acc_level_param_sor.pos_all;
             acc_disc_sor.pos_own_count := acc_level_param_sor.pos_own_count;
             acc_disc_sor.pos_own_trill := acc_level_param_sor.pos_own_trill;
             acc_disc_sor.pos_dom_count := acc_level_param_sor.pos_dom_count;
             acc_disc_sor.pos_dom_trill := acc_level_param_sor.pos_dom_trill;
             acc_disc_sor.pos_egt_count := acc_level_param_sor.pos_egt_count;
             acc_disc_sor.pos_egt_trill := acc_level_param_sor.pos_egt_trill;
             acc_disc_sor.pos_wrl_count := acc_level_param_sor.pos_wrl_count;
             acc_disc_sor.pos_wrl_trill := acc_level_param_sor.pos_wrl_trill;
             acc_disc_sor.pwc_all       := acc_level_param_sor.pwc_all;
             acc_disc_sor.pwc_own_count := acc_level_param_sor.pwc_own_count;
             acc_disc_sor.pwc_own_trill := acc_level_param_sor.pwc_own_trill;
             acc_disc_sor.pwc_dom_count := acc_level_param_sor.pwc_dom_count;
             acc_disc_sor.pwc_dom_trill := acc_level_param_sor.pwc_dom_trill;
             acc_disc_sor.pwc_egt_count := acc_level_param_sor.pwc_egt_count;
             acc_disc_sor.pwc_egt_trill := acc_level_param_sor.pwc_egt_trill;
             acc_disc_sor.pwc_wrl_count := acc_level_param_sor.pwc_wrl_count;
             acc_disc_sor.pwc_egt_trill := acc_level_param_sor.pwc_wrl_trill;
             acc_disc_sor.dload         := 1;
             acc_disc_sor.created_date  := p_sysdate;
                      
             insert into ACC_LEVEL_DISCOUNTS values acc_disc_sor;
             commit;
          end;  
        end if;            
      END LOOP; 
    
      --Kártya alapu kedvezmény
      FOR dwh_sor in cur_dwh_crd LOOP
          
          select count(*) into db from CARD_LEVEL_PARAM  crp 
          where trim(crp.ktg_code) = trim(dwh_sor.ktgkod)
          and  p_sysdate between crp.sdate and crp.vdate;
                
          if db != 0 then begin
                  
             select * into card_level_param_sor from CARD_LEVEL_PARAM  crp 
             where trim(crp.ktg_code) = trim(dwh_sor.ktgkod)
             and  p_sysdate between crp.sdate and crp.vdate
             order by crp.vdate desc
             offset 0 rows fetch next 1 rows only;
         
             card_disc_sor.crd_contract_id := dwh_sor.crd_contract_id;
             card_disc_sor.ktg_code        := trim(dwh_sor.ktgkod);              
             card_disc_sor.tr_all        := card_level_param_sor.tr_all;
             card_disc_sor.atm_all       := card_level_param_sor.atm_all;
             card_disc_sor.atm_own_count := card_level_param_sor.atm_own_count;
             card_disc_sor.atm_own_trill := card_level_param_sor.atm_own_trill;
             card_disc_sor.atm_dom_count := card_level_param_sor.atm_dom_count;
             card_disc_sor.atm_dom_trill := card_level_param_sor.atm_dom_trill;
             card_disc_sor.atm_egt_count := card_level_param_sor.atm_egt_count;
             card_disc_sor.atm_egt_trill := card_level_param_sor.atm_egt_trill;
             card_disc_sor.atm_wrl_count := card_level_param_sor.atm_wrl_count;
             card_disc_sor.atm_wrl_trill := card_level_param_sor.atm_wrl_trill;
             card_disc_sor.pos_all       := card_level_param_sor.pos_all;
             card_disc_sor.pos_own_count := card_level_param_sor.pos_own_count;
             card_disc_sor.pos_own_trill := card_level_param_sor.pos_own_trill;
             card_disc_sor.pos_dom_count := card_level_param_sor.pos_dom_count;
             card_disc_sor.pos_dom_trill := card_level_param_sor.pos_dom_trill;
             card_disc_sor.pos_egt_count := card_level_param_sor.pos_egt_count;
             card_disc_sor.pos_egt_trill := card_level_param_sor.pos_egt_trill;
             card_disc_sor.pos_wrl_count := card_level_param_sor.pos_wrl_count;
             card_disc_sor.pos_wrl_trill := card_level_param_sor.pos_wrl_trill;
             card_disc_sor.pwc_all       := card_level_param_sor.pwc_all;
             card_disc_sor.pwc_own_count := card_level_param_sor.pwc_own_count;
             card_disc_sor.pwc_own_trill := card_level_param_sor.pwc_own_trill;
             card_disc_sor.pwc_dom_count := card_level_param_sor.pwc_dom_count;
             card_disc_sor.pwc_dom_trill := card_level_param_sor.pwc_dom_trill;
             card_disc_sor.pwc_egt_count := card_level_param_sor.pwc_egt_count;
             card_disc_sor.pwc_egt_trill := card_level_param_sor.pwc_egt_trill;
             card_disc_sor.pwc_wrl_count := card_level_param_sor.pwc_wrl_count;
             card_disc_sor.pwc_egt_trill := card_level_param_sor.pwc_wrl_trill;  
             card_disc_sor.dload         := 1;              
             card_disc_sor.created_date  := p_sysdate; 
             insert into CARD_LEVEL_DISCOUNTS values card_disc_sor;
             commit;
             
          end;
        end if;
      END LOOP; 
      
      d := daily_check_hirdkod_ktgcode(p_sysdate);
    
    
      return 1;
  end;*/ 
  
  --- 1 fázis
  
  function pin_ujragyartas(p_sysdate date) return number is
      -- PIN     
      cursor cur_d_modif_cards is
        select mc.* from d_appl_vezer av 
        join d_modif_cards mc on ( mc.modif_id = av.id and trim(mc.proc_code) = '3' )
        where av.proc_code = 3 
        and trunc(av.mo_date) = trunc(p_sysdate)
        and av.dload = 1;
      -- Technikai csere
      cursor cur_d_modif_cards_tc is
        select mc.* from d_appl_vezer av 
        join d_modif_cards mc on ( mc.modif_id = av.id and trim(mc.proc_code) = '42' )
        where av.proc_code = 42 
        and trunc(av.mo_date) = trunc(p_sysdate)
        and av.dload = 1;
      -- Tiltás utáni pótlás
      cursor cur_d_modif_cards_tp is
        select mc.* from d_appl_vezer av 
        join d_modif_cards mc on ( mc.modif_id = av.id and trim(mc.proc_code) = '2' )
        where av.proc_code = 2 
        and trunc(av.mo_date) = trunc(p_sysdate)
        and av.dload = 1;
      
      d_modif_cards_sor      D_MODIF_CARDS%rowtype;
      mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
      app_vez_sor            D_APPL_VEZER%rowtype; 
      em_dwh_sor             EM_DWH%rowtype;
      db number;
      db1 number;
      db2 number;
      db3 NUMBER;
      tmp_fee number; 
      log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
  begin
    --PIN
    FOR d_modif_cards_sor  in cur_d_modif_cards LOOP
      
--      select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
--    NO_DATA_FOUND hiba kezelése
      select COUNT(*) into db3 from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
      
      IF db3=1 THEN BEGIN
         select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
      END;
      END IF;   
--      
      select count(*) into db from em_dwh em where trim(em.pan) = trim(d_modif_cards_sor.pan);
      select * into em_dwh_sor from em_dwh em 
      where trim(em.pan) = trim(d_modif_cards_sor.pan)
      and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
      
      -- Rule ellenőrzése mbh_product_fee_ruleból
      db1 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,1,p_sysdate); 
      
      if (db = 1 and db1 = 1 AND db3 = 1)
        then begin
          --select * into em_dwh_sor from em_dwh em where trim(em.pan) = trim(d_modif_cards_sor.pan);
          mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
          mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.cre_accno; 
          mbh_iss_crd_events_sor.crf_pre_pan    := null;
          mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
          mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
          mbh_iss_crd_events_sor.fee_type_id    := 1;
          mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
          mbh_iss_crd_events_sor.fee_booking    := 'T';
          mbh_iss_crd_events_sor.orig_creation  := sysdate;
          mbh_iss_crd_events_sor.last_modify    := sysdate;
          mbh_iss_crd_events_sor.dload          := 0;
          ------ if bene
          insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
          commit;
          
          -- post_flag
          -- Rule ellenőrzése mbh_product_fee_ruleból
          db2 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,20,p_sysdate); 
        
          if d_modif_cards_sor.crd_post_flg = 1 and db2 = 1
            then begin
              
              mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
              mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.cre_accno;
              mbh_iss_crd_events_sor.crf_pre_pan    := null;
              mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
              mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
              mbh_iss_crd_events_sor.fee_type_id    := 20;
              mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
              mbh_iss_crd_events_sor.fee_booking    := 'T';
              mbh_iss_crd_events_sor.orig_creation  := sysdate;
              mbh_iss_crd_events_sor.last_modify    := sysdate;
              mbh_iss_crd_events_sor.dload          := 0;
              ------if bene van a param táblában
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;
              
            end;
          end if;    
       end;
       else begin --  Hiba logolás
          
          log_sor.id          := d_modif_cards_sor.modif_id;
          log_sor.proc_code   := d_modif_cards_sor.proc_code;
          log_sor.pan         := TRIM(d_modif_cards_sor.pan);
          log_sor.crd_name    := d_modif_cards_sor.crd_name;
          log_sor.contract_id := d_modif_cards_sor.contract_id;
          log_sor.acc_num_24  := d_modif_cards_sor.cre_accno;
          log_sor.hiba_leiras := 'Nem található a kártya az EM_DWH-ban, vagy nincs hozzá érvényes szabály!';
          log_sor.forras      := 'M';
          log_sor.cr_date     := sysdate;
                    
          insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
          commit;
        end;
      end if; 
    END LOOP;
    --Technikai csere
    FOR d_modif_cards_sor  in cur_d_modif_cards_tc LOOP
      
--      select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
--    NO_DATA_FOUND kezelés
      select COUNT(*) into db3 from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
      
      IF db3=1 THEN BEGIN
         select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
      END;
      END IF;
--      
      select count(*) into db from em_dwh em where trim(em.pan) = trim(d_modif_cards_sor.pan)
       and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
      
      select decode(d_modif_cards_sor.pamess,'6',2,'7',11,'8',21,21) into tmp_fee from dual;
      select count(*) into db1 from MBH_PRODUCT_FEE_RULE mr
        where mr.product_id =  em_dwh_sor.crd_product 
        and mr.fee_type_id = tmp_fee
        and p_sysdate between mr.vdate_start and mr.vdate_end;
        
      if (db = 1 and db1 = 1 AND db3 = 1)
        then begin
          select * into em_dwh_sor from em_dwh em 
          where trim(em.pan) = trim(d_modif_cards_sor.pan)
          and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
          
          update mbh_iss_crd_events mbh set mbh.crf_pre_pan = trim(mbh.crf_pan),
             mbh.crf_pan = trim(em_dwh_sor.pan),
             mbh.last_modify = sysdate
             where trim(mbh.crf_pan) = trim(em_dwh_sor.pre_pan)
             and mbh.dload = 1
             and mbh.fee_type_id in (3,5,15,16,17,18,23,24);
             commit;       
          
                   
          mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
          mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.cre_accno; 
          mbh_iss_crd_events_sor.crf_pre_pan    := null;
          mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
          mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
          mbh_iss_crd_events_sor.fee_type_id    := tmp_fee;
          mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
          mbh_iss_crd_events_sor.fee_booking    := 'T';
          mbh_iss_crd_events_sor.orig_creation  := sysdate;
          mbh_iss_crd_events_sor.last_modify    := sysdate;
          mbh_iss_crd_events_sor.dload          := 0;
          
          insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
          commit;
                   
          -- post_flag
          -- Rule ellenőrzése mbh_product_fee_ruleból
          db2 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,20,p_sysdate); 
                  
          if d_modif_cards_sor.crd_post_flg = 1 and db2 = 1
            then begin
              
              mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
              mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.cre_accno;
              mbh_iss_crd_events_sor.crf_pre_pan    := null;
              mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
              mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
              mbh_iss_crd_events_sor.fee_type_id    := 20;
              mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
              mbh_iss_crd_events_sor.fee_booking    := 'T';
              mbh_iss_crd_events_sor.orig_creation  := sysdate;
              mbh_iss_crd_events_sor.last_modify    := sysdate;
              mbh_iss_crd_events_sor.dload          := 0;
              
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;
              
            end;
          end if;    
       end;
      end if; 
    END LOOP;
    -- Tiltás utáni pótlás
    FOR d_modif_cards_sor  in cur_d_modif_cards_tp LOOP
      
--      select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
--    NO_DATA_FOUND kezelés
      select COUNT(*) into db3 from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;

      IF db3 = 1 THEN BEGIN
      select * into app_vez_sor from d_appl_vezer av where av.id = d_modif_cards_sor.modif_id;
      END;
      END IF;
--      
      select count(*) into db from em_dwh em where trim(em.pan) = trim(d_modif_cards_sor.pan)
        and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
      
      select decode(d_modif_cards_sor.pamess,'3',10,'9',9,'10',13,'11',12,'12',14,14) into tmp_fee from dual;
      select count(*) into db1 from MBH_PRODUCT_FEE_RULE mr
        where mr.product_id =  em_dwh_sor.crd_product 
        and mr.fee_type_id = tmp_fee
        and p_sysdate between mr.vdate_start and mr.vdate_end;
        
      if db = 1 and db1 = 1 AND db3 = 1
        then begin
          select * into em_dwh_sor from em_dwh em 
          where trim(em.pan) = trim(d_modif_cards_sor.pan)
          and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
          
          update mbh_iss_crd_events mbh set mbh.crf_pre_pan = trim(mbh.crf_pan),
             mbh.crf_pan = trim(em_dwh_sor.pan),
             mbh.last_modify = sysdate
             where trim(mbh.crf_pan) = trim(em_dwh_sor.pre_pan)
             and mbh.dload = 1
             and mbh.fee_type_id in (3,5,15,16,17,18,23,24);
          commit;
          
          mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
          mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.acc_no; 
          mbh_iss_crd_events_sor.crf_pre_pan    := null;
          mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
          mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
          mbh_iss_crd_events_sor.fee_type_id    := tmp_fee;
          mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
          mbh_iss_crd_events_sor.fee_booking    := 'T';
          mbh_iss_crd_events_sor.orig_creation  := sysdate;
          mbh_iss_crd_events_sor.last_modify    := sysdate;
          mbh_iss_crd_events_sor.dload          := 0;
          
          insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
          commit;
          
          -- post_flag
          select count(*) into db2 from MBH_PRODUCT_FEE_RULE mr
          where mr.product_id =  em_dwh_sor.crd_product 
          and mr.fee_type_id = 20
          and p_sysdate between mr.vdate_start and mr.vdate_end;
        
          if d_modif_cards_sor.crd_post_flg = 1 and db2 = 1
            then begin
              mbh_iss_crd_events_sor.crf_pan        := TRIM(d_modif_cards_sor.pan);
              mbh_iss_crd_events_sor.crf_acc_num_24 := d_modif_cards_sor.cre_accno;
              mbh_iss_crd_events_sor.crf_pre_pan    := null;
              mbh_iss_crd_events_sor.contract_id    := d_modif_cards_sor.contract_id;
              mbh_iss_crd_events_sor.crf_crd_first  := nvl(em_dwh_sor.crf_crd_first,1);
              mbh_iss_crd_events_sor.fee_type_id    := 20;
              mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
              mbh_iss_crd_events_sor.fee_booking    := 'T';
              mbh_iss_crd_events_sor.orig_creation  := sysdate;
              mbh_iss_crd_events_sor.last_modify    := sysdate;
              mbh_iss_crd_events_sor.dload          := 0;
              
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;
            end;
          end if;    
       end;
       else begin
          log_sor.id          := d_modif_cards_sor.modif_id;
          log_sor.proc_code   := d_modif_cards_sor.proc_code;
          log_sor.pan         := TRIM(d_modif_cards_sor.pan);
          log_sor.crd_name    := d_modif_cards_sor.crd_name;
          log_sor.contract_id := d_modif_cards_sor.contract_id;
          log_sor.acc_num_24  := d_modif_cards_sor.cre_accno;
          log_sor.hiba_leiras := 'Nem található a kártya az EM_DWH-ban, vagy nincs hozzá érvényes szabály!';
          log_sor.forras      := 'M';
          log_sor.cr_date     := sysdate;
                    
          insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
          commit;
       end;
      end if; 
    END LOOP;
    return 1;
  end;
  
  function pin_ujragyartas_feld(p_sysdate date) return number is
      -- pin
      cursor cur_multicard is
        select mc.* from multicard mc 
        join em_dwh em on (trim(em.pan) = trim(mc.pan) )
        where mc.ftype = 'P'
        and mc.dload = 1
        and trunc(mc.emdate) = trunc(p_sysdate);
     
      -- technikai csere és tiltás utáni pótlás
      cursor cur_multicard_tc is
        select mc.* from multicard mc 
        join em_dwh em on (trim(em.pan) = trim(mc.pan) )
        where mc.ftype = 'C'
        and mc.dload = 1
        and trunc(mc.emdate) = trunc(p_sysdate);   
     
     multicard_sor          MULTICARD%rowtype;
     mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
     mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
     em_dwh_sor             EM_DWH%rowtype;
     db number;
     db1 number;
     db2 NUMBER;
     tmp_contract_id number;   
     i number; 
  begin
    -- pin
    FOR multicard_sor in cur_multicard LOOP
    
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.crf_pan) = trim(multicard_sor.pan)
        and mce.fee_type_id = 1
        and mce.dload = 0
        and trunc(mce.orig_creation) < trunc(multicard_sor.emdate);

--      NO_DATA_FOUND kezelés
        select COUNT(*) into db2 from EM_DWH em
        where (trim(em.pan) = trim(multicard_sor.pan))
        and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
--
        -- Kártya kikeresése az em_dwhból
        IF db2 = 1 THEN BEGIN
          select * into em_dwh_sor from EM_DWH em
          where (trim(em.pan) = trim(multicard_sor.pan))
          and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
        END;
        END IF;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           1,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.crf_pan) = trim(multicard_sor.pan)
                    and mce.fee_type_id = 1
                    and mce.dload = 0;
                    commit;
                  end;
                  else i:= 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.crf_pan) = trim(multicard_sor.pan)
                    and mce.fee_type_id = 1
                    and mce.dload = 0;
              end;
            end if;
          end;
        end if;
        
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.crf_pan) = trim(multicard_sor.pan)
        and mce.fee_type_id = 20
        and mce.dload = 0
        and trunc(mce.orig_creation) < trunc(multicard_sor.emdate);
            
        if db = 1 AND db2 = 1 
          then begin
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/                       
            -- Paraméterek kikeresése a mbh_iss_crd_feesbő
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           20,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.crf_pan) = trim(multicard_sor.pan)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
                  end;
                  else i:= 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.crf_pan) = trim(multicard_sor.pan)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
              end;
            end if;
          end;
        end if;
    END LOOP;
    -- Technikai csere és tiltás utáni pótlás
    FOR multicard_sor in cur_multicard_tc LOOP
        select em.crd_contract_id into tmp_contract_id from em_dwh em where trim(em.pan) = trim(multicard_sor.pan);
        
        --fee_type_id = 20
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 20
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);

--      NO_DATA_FOUND kezelés
        select COUNT(*) into db2 from EM_DWH em
        where (trim(em.pan) = trim(multicard_sor.pan))
        and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
--
        -- Kártya kikeresése az em_dwhból
        IF db2 = 1 THEN BEGIN
          select * into em_dwh_sor from EM_DWH em
          where (trim(em.pan) = trim(multicard_sor.pan))
          and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
        END;
        END IF;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           20,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
                  end;
                  else i:= 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 2
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 2
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           2,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 2
                    and mce.dload = 0;
                    commit;
                  end;
                  else i:= 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 2
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        --fee_type_id = 11
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 11
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           11,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 11
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 11
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        --fee_type_id = 21
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 21
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           21,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 21
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 21
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 10
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 10
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           10,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 10
                    and mce.dload = 0;
                    commit;
                  end;
                  else i:= 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 10
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 9
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 9
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           9,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 9
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 9
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 13
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 13
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           13,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 13
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 13
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 12
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 12
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           12,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 12
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 12
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 14
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 14
        and mce.dload = 0
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           14,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    --mce.fee_date = trunc(p_sysdate+1)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 14
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 14
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        -- Viktor módosítása 2024.05.29 - Az éves/havi díjelőjegyzések rekordjaiban is módosítani kell a kártyaszámot ha megjön az új kártya
        --fee_type_id = 3
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 3
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           3,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 3
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 3
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 5
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 5
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           5,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 5
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 5
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 15
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 15
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           15,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 15
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 15
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 16
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 16
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           16,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 16
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 16
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 17
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 17
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           17,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 17
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 17
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 18
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 18
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           18,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 18
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 18
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 23
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 23
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           23,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 23
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 23
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;

        --fee_type_id = 24
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 24
        and mce.dload = 1
        and trim(mce.crf_pan) <> trim(multicard_sor.pan);
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan));
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           24,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.crf_pre_pan = trim(mce.crf_pan),
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = SYSDATE
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 24
                    and mce.dload = 1;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 24
                    and mce.dload = 1;
                    commit;
              end;
            end if;
          end;
        end if;

        -- Viktor módosítás vége
    END LOOP;
        
    return 1;
  end;
 
  function find_mbh_iss_crd_fees(p_product_id varchar2,
                               p_ktgkod varchar2,
                               p_giro varchar2,
                               p_fee_type_id number,
                               p_date date,
                               p_accn varchar2,
                               p_db OUT number
                               ) return MBH_ISS_CRD_FEES%rowtype is
     mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
     db1 number;
     db2 number;
     db3 number;
     db4 number;
     db5 number;
   begin
      -- Paraméterek kikeresése a mbh_iss_crd_feesből
      select count(*) into db1 from MBH_ISS_CRD_FEES mcf
      where mcf.product_id = trim(p_product_id)
      and mcf.ktg_kod = trim(p_ktgkod)
      and mcf.giro = trim(p_giro) --- felul kell vizsgálni
      and mcf.fee_type_id = p_fee_type_id
      and p_date between mcf.vdate_start and mcf.vdate_end;
      
      select count(*) into db2 from MBH_ISS_CRD_FEES mcf
      where mcf.product_id = trim(p_product_id)
      and mcf.ktg_kod = '0'
      and mcf.giro = trim(p_giro) --- felul kell vizsgálni
      and mcf.fee_type_id = p_fee_type_id
      and p_date between mcf.vdate_start and mcf.vdate_end;
      
      select count(*) into db3 from MBH_ISS_CRD_FEES mcf
      where mcf.product_id = trim(p_product_id)
      and mcf.ktg_kod = '0'
      and mcf.giro = '504' --- felul kell vizsgálni
      and mcf.fee_type_id = p_fee_type_id
      and p_date between mcf.vdate_start and mcf.vdate_end; 
      
      select count(*) into db4 from MBH_ISS_CRD_FEES mcf
      where mcf.product_id = trim(p_product_id)
      and mcf.ktg_kod = '0'
      and mcf.giro = '000' --- felul kell vizsgálni
      and mcf.fee_type_id = p_fee_type_id
      and p_date between mcf.vdate_start and mcf.vdate_end;
      
      select count(*) into db5 from MBH_ISS_CRD_FEES mcf
      where mcf.product_id = trim(p_product_id)
      and mcf.ktg_kod = '0'
      and mcf.giro = decode(substr(p_accn,1,3),181,182,substr(p_accn,1,3)) --- felul kell vizsgálni
      and mcf.fee_type_id = p_fee_type_id
      and p_date between mcf.vdate_start and mcf.vdate_end;
        
                   
      if db1 = 0
         then begin                   
            if db2 = 0
               then begin                  
                  if db3 = 0
                     then begin
                        if db4 = 0
                           then begin
                                if db5 <> 0
                                  then begin
                                    select * into mbh_iss_crd_fees_sor from MBH_ISS_CRD_FEES mcf
                                    where mcf.product_id = trim(p_product_id)
                                    and mcf.ktg_kod = '0'
                                    and mcf.giro = decode(substr(p_accn,1,3),181,182,substr(p_accn,1,3)) --- Ezt javítottam FV 2024.03.25
                                    and mcf.fee_type_id = p_fee_type_id
                                    and p_date between mcf.vdate_start and mcf.vdate_end;
                                  end;
                                end if;
                             end;   
                             else begin
                                  select * into mbh_iss_crd_fees_sor from MBH_ISS_CRD_FEES mcf
                                  where mcf.product_id = trim(p_product_id)
                                  and mcf.ktg_kod = '0'
                                  and mcf.giro = '000' --- felul kell vizsgálni
                                  and mcf.fee_type_id = p_fee_type_id
                                  and p_date between mcf.vdate_start and mcf.vdate_end;
                             end;   
                         end if;        
                     end;
                     else begin
                       select * into mbh_iss_crd_fees_sor from MBH_ISS_CRD_FEES mcf
                        where mcf.product_id = trim(p_product_id)
                        and mcf.ktg_kod = '0' 
                        and mcf.giro = '504' --- felul kell vizsgálni
                        and mcf.fee_type_id = p_fee_type_id
                        and p_date between mcf.vdate_start and mcf.vdate_end; 
                     end;
                   end if; 
               end;
               else begin
                 select * into mbh_iss_crd_fees_sor from MBH_ISS_CRD_FEES mcf
                  where mcf.product_id = trim(p_product_id)
                  and mcf.ktg_kod = '0'
                  and mcf.giro = trim(p_giro) --- felul kell vizsgálni
                  and mcf.fee_type_id = p_fee_type_id
                  and p_date between mcf.vdate_start and mcf.vdate_end;
               end;
            end if;   
         end;
         else begin
            select * into mbh_iss_crd_fees_sor  from MBH_ISS_CRD_FEES mcf
            where mcf.product_id = trim(p_product_id)
            and mcf.ktg_kod = trim(p_ktgkod)
            and mcf.giro = trim(p_giro) --- felul kell vizsgálni
            and mcf.fee_type_id = p_fee_type_id
            and p_date between mcf.vdate_start and mcf.vdate_end;
         end;
       end if;
     
     if (db1 > 0 or db2 > 0 or db3 > 0 or db4 > 0 or db5 > 0)
       then p_db := 1;
       else p_db := 0;
     end if;
   
     return  mbh_iss_crd_fees_sor;
   end;

   function mbh_iss_fees_calc(p_sysdate date) return number is
     cursor cur_mbh_iss_crd_ev is
        select ev.* from MBH_ISS_CRD_EVENTS ev 
        where ev.dload = 1
        and trunc(ev.fee_date) <= trunc(p_sysdate);
        --and trim(ev.crf_pan) in (/*'4283129982846955','4283129985093431',*/'4283129974060938'); -- kivenni.
        
     mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
     mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
     em_dwh_sor             EM_DWH%rowtype;
     fd_card_fees_new_sor   FD_CARD_FEES_NEW%rowtype;
     db number;
     db1 number;
     db2 NUMBER;
     min_crf_crd number;
     tmp_fee_type number;
     tmp_mark number;
     tmp_db number; 
     log_sor MBH_ISS_FEE_HIBA_LOG%rowtype; 
     tmp_szk BOOLEAN;
     tmp_blocking BOOLEAN;
   begin
     FOR mbh_iss_crd_events_sor in cur_mbh_iss_crd_ev LOOP   
         -- Kártya kikeresése az em_dwhból
--       NO_DATA_FOUND kezelés
         select COUNT(*) into db2 from EM_DWH em
         where (trim(em.pan) = trim(mbh_iss_crd_events_sor.crf_pan))
         and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
--
         IF db2 = 1 THEN BEGIN
           select * into em_dwh_sor from EM_DWH em
           where (trim(em.pan) = trim(mbh_iss_crd_events_sor.crf_pan))
           and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
         END;
         END IF;
         
         -- Viktor módosítása 2024.05.27
         -- "Crf_crd_first mező aktualizálása"
         select min(em.crf_crd_first) into min_crf_crd from em_dwh em
         where trim(em.acc_num_24) = trim(mbh_iss_crd_events_sor.crf_acc_num_24)
         and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2)
                                           from em_dwh e
                                           where TRIM(e.pan)=trim(mbh_iss_crd_events_sor.crf_pan)
                                           AND e.crd_seq_num!='444'
                                           AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num)
                                                                FROM em_dwh x
                                                                WHERE TRIM(x.pan)=TRIM(e.pan)) FETCH FIRST ROW ONLY)
         and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;  
         min_crf_crd:=nvl(min_crf_crd,1);
         tmp_mark := 0;
         if mbh_iss_crd_events_sor.crf_crd_first = min_crf_crd
           then mbh_iss_crd_events_sor.crf_crd_first := 1;
         end if;
         -- Viktor módosítás vége
         
         -- Fee_type_id ellenőrzése
         case when mbh_iss_crd_events_sor.fee_type_id in(3) then
              begin
                if trim(mbh_iss_crd_events_sor.crf_crd_first) = '1'
                  then begin

                    select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                    where mr.product_id =  em_dwh_sor.crd_product
                    and mr.fee_type_id in (3,15,23)
                    and p_sysdate between mr.vdate_start and mr.vdate_end;
 
                    IF tmp_db = 1 THEN
                      select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                      where mr.product_id =  em_dwh_sor.crd_product
                      and mr.fee_type_id in (3,15,23)
                      and p_sysdate between mr.vdate_start and mr.vdate_end;
                    else tmp_fee_type := 0;
                    end if;                                      

                  end;
                  else begin

                    select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                    where mr.product_id =  em_dwh_sor.crd_product
                    and mr.fee_type_id in (3,17,24)
                    and p_sysdate between mr.vdate_start and mr.vdate_end;

                    IF tmp_db = 1 THEN
                      select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                      where mr.product_id =  em_dwh_sor.crd_product
                      and mr.fee_type_id in (3,17,24)
                      and p_sysdate between mr.vdate_start and mr.vdate_end;
                    ELSE tmp_fee_type := 0;
                    END IF;
                    
                  end;
                end if;
                case when tmp_fee_type = 3 then
                  tmp_mark := 0;
                when tmp_fee_type in(15,17) then
                  tmp_mark := 1;
                WHEN tmp_fee_type in(23,24) then
                  tmp_mark := 2;
                ELSE
                  tmp_mark := 3;  
                end case;
              end;
         when mbh_iss_crd_events_sor.fee_type_id in(5) then
              begin
                if trim(mbh_iss_crd_events_sor.crf_crd_first) = '1'
                  then begin

                    select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                    where mr.product_id =  em_dwh_sor.crd_product
                    and mr.fee_type_id in (5,15,18)
                    and p_sysdate between mr.vdate_start and mr.vdate_end;

                    IF tmp_db = 1 THEN
                      select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                      where mr.product_id =  em_dwh_sor.crd_product
                      and mr.fee_type_id in (5,15,18)
                      and p_sysdate between mr.vdate_start and mr.vdate_end;
                    ELSE tmp_fee_type := 0;
                    END IF;

                  end;
                  else begin

                    select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                    where mr.product_id =  em_dwh_sor.crd_product
                    and mr.fee_type_id in (5,17,16)
                    and p_sysdate between mr.vdate_start and mr.vdate_end;

                    IF tmp_db = 1 THEN
                      select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                      where mr.product_id =  em_dwh_sor.crd_product
                      and mr.fee_type_id in (5,17,16)
                      and p_sysdate between mr.vdate_start and mr.vdate_end;
                    ELSE tmp_fee_type := 0;
                    END IF;

                  end;
                end if;
                case when tmp_fee_type = 5 then
                  tmp_mark := 0;
                when tmp_fee_type in(15,17) then
                  tmp_mark := 1;
                when tmp_fee_type in(16,18) then
                  tmp_mark := 2;
                else
                  tmp_mark := 3;
                end case;
              end;
         when mbh_iss_crd_events_sor.fee_type_id in(15,17) then
              begin

                select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                where mr.product_id =  em_dwh_sor.crd_product
                and mr.fee_type_id = mbh_iss_crd_events_sor.fee_type_id
                and p_sysdate between mr.vdate_start and mr.vdate_end;

                if tmp_db = 1 then
                    select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                    where mr.product_id =  em_dwh_sor.crd_product
                    and mr.fee_type_id = mbh_iss_crd_events_sor.fee_type_id
                    and p_sysdate between mr.vdate_start and mr.vdate_end;
                else tmp_fee_type := 0;
                end if;

                case when tmp_fee_type = mbh_iss_crd_events_sor.fee_type_id  then
                 tmp_mark := 0;
                else
                 tmp_mark := 3;
                end case;
              end;
          when mbh_iss_crd_events_sor.fee_type_id in(16) then
              begin

                select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                where mr.product_id =  em_dwh_sor.crd_product
                and mr.fee_type_id in (5,17,16)
                and p_sysdate between mr.vdate_start and mr.vdate_end;

                IF tmp_db = 1 THEN
                  select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                  where mr.product_id =  em_dwh_sor.crd_product
                  and mr.fee_type_id in (5,17,16)
                  and p_sysdate between mr.vdate_start and mr.vdate_end;
                ELSE tmp_fee_type :=0 ;
                END IF;

                case when tmp_fee_type = 16 then
                  tmp_mark := 0;
                when tmp_fee_type = 17 then
                  tmp_mark := 1;
                when tmp_fee_type = 5 then
                  tmp_mark := 2;
                else
                  tmp_mark := 3;
                end case;
              end;
            when mbh_iss_crd_events_sor.fee_type_id in(18) then
              begin

                select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                where mr.product_id =  em_dwh_sor.crd_product
                and mr.fee_type_id in (5,15,18)
                and p_sysdate between mr.vdate_start and mr.vdate_end;

                IF tmp_db = 1 THEN
                  select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                  where mr.product_id =  em_dwh_sor.crd_product
                  and mr.fee_type_id in (5,15,18)
                  and p_sysdate between mr.vdate_start and mr.vdate_end;
                ELSE tmp_fee_type := 0;
                END IF;

                case when tmp_fee_type = 18 then
                  tmp_mark := 0;
                when tmp_fee_type = 15 then
                  tmp_mark := 1;
                when tmp_fee_type = 5 then
                  tmp_mark := 2;
                else
                  tmp_mark := 3;
                end case;
              end;
            when mbh_iss_crd_events_sor.fee_type_id in(23) then
              begin

                select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                where mr.product_id =  em_dwh_sor.crd_product
                and mr.fee_type_id in (3,15,23)
                and p_sysdate between mr.vdate_start and mr.vdate_end;

                IF tmp_db = 1 THEN
                  select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                  where mr.product_id =  em_dwh_sor.crd_product
                  and mr.fee_type_id in (3,15,23)
                  and p_sysdate between mr.vdate_start and mr.vdate_end;
                ELSE tmp_fee_type := 0;
                END IF;
                
                case when tmp_fee_type = 23 then
                  tmp_mark := 0;
                when tmp_fee_type = 15 then
                  tmp_mark := 1;
                when tmp_fee_type = 3 then
                  tmp_mark := 2;
                else
                  tmp_mark := 3;
                end case;
              end;
            when mbh_iss_crd_events_sor.fee_type_id in(24) then
              begin

                select count(*) into tmp_db from MBH_PRODUCT_FEE_RULE mr
                where mr.product_id =  em_dwh_sor.crd_product
                and mr.fee_type_id in (3,17,24)
                and p_sysdate between mr.vdate_start and mr.vdate_end;

                IF tmp_db = 1 THEN
                  select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr
                  where mr.product_id =  em_dwh_sor.crd_product
                  and mr.fee_type_id in (3,17,24)
                  and p_sysdate between mr.vdate_start and mr.vdate_end;
                ELSE tmp_fee_type := 0;
                END IF;

                case when tmp_fee_type = 24 then
                  tmp_mark := 0;
                when tmp_fee_type = 17 then
                  tmp_mark := 1;
                when tmp_fee_type = 3 then
                  tmp_mark := 2;
                else
                  tmp_mark := 3;
                end case;
              end;
            else tmp_fee_type := mbh_iss_crd_events_sor.fee_type_id;
         end case;
         --- tmp_mark vizsgálat
         case when tmp_mark = 0 then
              tmp_fee_type := mbh_iss_crd_events_sor.fee_type_id;
         when tmp_mark = 1 then
           begin
             tmp_fee_type := mbh_iss_crd_events_sor.fee_type_id;
             log_sor.id          := null;
             log_sor.proc_code   := null;
             log_sor.pan         := mbh_iss_crd_events_sor.crf_pan;
             log_sor.crd_name    := null;
             log_sor.contract_id := mbh_iss_crd_events_sor.contract_id;
             log_sor.acc_num_24  := mbh_iss_crd_events_sor.crf_acc_num_24;
             log_sor.crd_product := em_dwh_sor.crd_product;
             log_sor.hiba_leiras := 'Havi dijas termékről Éves dijasra történő módosítás!';
             log_sor.forras      := 'E';
             log_sor.cr_date     := sysdate;

             insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
             commit;
           end;
         when tmp_mark = 2 then
           begin
                update MBH_ISS_CRD_EVENTS mce set mce.fee_type_id = tmp_fee_type,
                                                  mce.last_modify = sysdate
                where trim(mbh_iss_crd_events_sor.crf_pan) = trim(mce.crf_pan)
                and mbh_iss_crd_events_sor.fee_type_id = mce.fee_type_id
                and trunc(mbh_iss_crd_events_sor.fee_date) = trunc(mce.fee_date)
                and mbh_iss_crd_events_sor.dload = 1;
                commit;

                mbh_iss_crd_events_sor.fee_type_id :=  tmp_fee_type;
            END;
         ELSE
           BEGIN
             tmp_fee_type := mbh_iss_crd_events_sor.fee_type_id;
             log_sor.id          := null;
             log_sor.proc_code   := null;
             log_sor.pan         := mbh_iss_crd_events_sor.crf_pan;
             log_sor.crd_name    := null;
             log_sor.contract_id := mbh_iss_crd_events_sor.contract_id;
             log_sor.acc_num_24  := mbh_iss_crd_events_sor.crf_acc_num_24;
             log_sor.crd_product := em_dwh_sor.crd_product;
             log_sor.hiba_leiras := 'Hiányzó paraméterezés az MBH_PRODUCT_FEE_RULE táblából!';
             log_sor.forras      := 'R';
             log_sor.cr_date     := sysdate;

             insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
             commit;
             
           END;
         end case;

         -- Paraméterek kikeresése a mbh_iss_crd_feesbő
         mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                       em_dwh_sor.ktgkod,
                                                       em_dwh_sor.agent1,
                                                       tmp_fee_type,
                                                       p_sysdate,
                                                       em_dwh_sor.acc_num_24,
                                                       db1);
                                                      
         if (db1 = 1 and tmp_mark != 1 AND db2 = 1) then
            begin
              --  Most csak a havi díjas megy át!
              --if (em_dwh_sor.crd_product in ('65191','65192','65193','65194') and em_dwh_sor.ktgkod = '1456' ) then
                 --begin
                    -- FD_CARD_FEES_NEW insert
                    -- ÉLESÍTÉSKOR A DÍJÁTADÁS LEGYEN KIKOMMENTELVE!!!
                    --  Tiltott kártya éves díját nem kell átadni!
              if em_dwh_sor.crd_status NOT in ('2','3') OR tmp_fee_type=4 then
                 begin
                    fd_card_fees_new_sor.crf_rec_type  := 'E';
                    fd_card_fees_new_sor.crf_pan       := trim(em_dwh_sor.pan);
                    fd_card_fees_new_sor.crf_own_name  := em_dwh_sor.emboss_name;
                    fd_card_fees_new_sor.crf_giro      := substr(em_dwh_sor.acc_num_24,1,3);
                    fd_card_fees_new_sor.crf_branch    := substr(em_dwh_sor.acc_num_24,4,5);
                    fd_card_fees_new_sor.crf_account   := substr(em_dwh_sor.acc_num_24,9);
                    fd_card_fees_new_sor.crf_fee       := mbh_iss_crd_fees_sor.fee_value;
                    fd_card_fees_new_sor.crf_curr      := mbh_iss_crd_fees_sor.cur_type_id;
                    fd_card_fees_new_sor.crf_fee_type  := tmp_fee_type;
                    fd_card_fees_new_sor.crf_date      := mbh_iss_crd_events_sor.fee_date;              
                    fd_card_fees_new_sor.crf_dload     := 0;
                    fd_card_fees_new_sor.crf_file_name := 'emcardfee.'||to_char(sysdate,'DDD');
                    fd_card_fees_new_sor.crf_insert_date := trunc(sysdate);
                    fd_card_fees_new_sor.crf_fee_stat  := 0;
                    fd_card_fees_new_sor.accnum_24     := em_dwh_sor.acc_num_24;
                    fd_card_fees_new_sor.hirdkod       := em_dwh_sor.hirdkod;
                    fd_card_fees_new_sor.contractid    := em_dwh_sor.crd_contract_id;
                    fd_card_fees_new_sor.contract_date := '20' || em_dwh_sor.orig_crd_crea_date;
                    fd_card_fees_new_sor.crd_product   := em_dwh_sor.crd_product;
                    fd_card_fees_new_sor.ktgkod        := em_dwh_sor.ktgkod;
                    fd_card_fees_new_sor.fo_tars       := em_dwh_sor.fotars;
                    fd_card_fees_new_sor.dijgiro       := em_dwh_sor.dij_giro;
                    fd_card_fees_new_sor.acc_curr      := em_dwh_sor.acc_curr;
                    fd_card_fees_new_sor.acc_status    := em_dwh_sor.acc_status;
                    fd_card_fees_new_sor.agent1        := em_dwh_sor.agent1;
                    fd_card_fees_new_sor.hird_change   := em_dwh_sor.hirdkod_chg_date;
                    
                    insert into FD_CARD_FEES_NEW values fd_card_fees_new_sor;
                    commit;
                    END;
                 ELSE BEGIN
                 
                     log_sor.id          := null;
                     log_sor.proc_code   := null;
                     log_sor.pan         := mbh_iss_crd_events_sor.crf_pan;
                     log_sor.crd_name    := null;
                     log_sor.contract_id := mbh_iss_crd_events_sor.contract_id;
                     log_sor.acc_num_24  := mbh_iss_crd_events_sor.crf_acc_num_24;
                     log_sor.crd_product := em_dwh_sor.crd_product;
                     log_sor.hiba_leiras := 'Tiltott kártyára nem számolunk éves díjat';
                     log_sor.forras      := 'E';
                     log_sor.cr_date     := sysdate;
                                            
                     insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
                     commit;  

                 END;
              END if;
                    
                    -- MBH_ISS_CRD_EVENTS dload update
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 9,
                                                      mce.last_modify = sysdate 
                    where trim(mbh_iss_crd_events_sor.crf_pan) = trim(mce.crf_pan)
                    and mbh_iss_crd_events_sor.fee_type_id = mce.fee_type_id
                    and trunc(mbh_iss_crd_events_sor.fee_date) = trunc(mce.fee_date)
                    and mbh_iss_crd_events_sor.dload = 1;
                    commit;
                    
                    --- Insert éves vagy havi dij újra előjegyzése
                    --- Viktor módosítása 2024.05.27
                    /*select min(em.crf_crd_first) into min_crf_crd  from em_dwh em 
                    where trim(em.acc_num_24) = trim(mbh_iss_crd_events_sor.crf_acc_num_24)
                    and em.crd_seq_num != '444';*/
                    select min(em.crf_crd_first) into min_crf_crd from em_dwh em 
                    where trim(em.acc_num_24) = trim(mbh_iss_crd_events_sor.crf_acc_num_24)
                    and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2) 
                                                      from em_dwh e 
                                                      where TRIM(e.pan) = trim(mbh_iss_crd_events_sor.crf_pan)
                                                      AND e.crd_seq_num!='444'
                                                      AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num) 
                                                                           FROM em_dwh x
                                                                           WHERE TRIM(x.pan) = TRIM(e.pan))FETCH FIRST ROW ONLY)
                    and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;
                    
                    min_crf_crd:=nvl(min_crf_crd,1);
                    
                    -- Viktor módosítás vége

                    tmp_szk:=FALSE;
                    IF substr(em_dwh_sor.crd_product,1,2) IN ('31','33','43') 
                             AND EXTRACT(YEAR FROM mbh_iss_crd_events_sor.fee_date)+1 = EXTRACT(YEAR FROM last_day(to_date(em_dwh_sor.crd_expiry_dat,'YYMM')))
                    THEN tmp_szk:= TRUE;
                    END IF;
                    IF tmp_szk=TRUE AND mbh_iss_crd_events_sor.fee_type_id in (3,5,15,16,17,18,23,24)-- SZK utolsó éves díját nem kell előjegyezni
                    THEN
                      BEGIN
                         log_sor.id          := null;
                         log_sor.proc_code   := null;
                         log_sor.pan         := mbh_iss_crd_events_sor.crf_pan;
                         log_sor.crd_name    := em_dwh_sor.emboss_name;
                         log_sor.contract_id := mbh_iss_crd_events_sor.contract_id;
                         log_sor.acc_num_24  := mbh_iss_crd_events_sor.crf_acc_num_24;
                         log_sor.crd_product := em_dwh_sor.crd_product;
                         log_sor.hiba_leiras := 'SZK termék utolsó éves díját nem kell előjegyezni!';
                         log_sor.forras      := 'M';
                         log_sor.cr_date     := sysdate;

                         insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
                         commit;
                       end;
                    END IF;
                    -- nem megújuló kártyák jelölése
                    tmp_blocking := FALSE;
                    IF em_dwh_sor.crd_blocking_reason<>0 
                      THEN tmp_blocking := TRUE;
                    END IF;
                    
                    if(mbh_iss_crd_events_sor.fee_type_id in (3,5,15,16,17,18,23,24))
                    AND tmp_szk = FALSE AND tmp_blocking = FALSE --SZK és a nem megújuló előjegyzések kizárása az utolsó évben
                     then begin
                      case when mbh_iss_crd_events_sor.fee_type_id = 3
                        then begin
                          mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                          mbh_iss_crd_events_sor.fee_type_id := 5;
                        end;
                        when mbh_iss_crd_events_sor.fee_type_id = 5 
                          then begin
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 15 
                          then begin
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,1);
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 16 
                          then begin
                            if mbh_iss_crd_events_sor.crf_crd_first = min_crf_crd
                              then mbh_iss_crd_events_sor.fee_type_id := 18;
                            end if;
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 17 
                          then begin
                            if mbh_iss_crd_events_sor.crf_crd_first = min_crf_crd
                              then mbh_iss_crd_events_sor.fee_type_id := 15;
                            end if;
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,1);
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 18 
                          then begin
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 23 
                          then begin
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                            mbh_iss_crd_events_sor.fee_type_id := 18;
                          end;
                        when mbh_iss_crd_events_sor.fee_type_id = 24 
                          then begin
                            mbh_iss_crd_events_sor.fee_date := add_months(mbh_iss_crd_events_sor.fee_date,12);
                            mbh_iss_crd_events_sor.fee_type_id := 16;
                          end;
                      end case;
                      mbh_iss_crd_events_sor.last_modify := sysdate;
                      mbh_iss_crd_events_sor.orig_creation := sysdate;
                      mbh_iss_crd_events_sor.dload := 1;
                      insert into MBH_ISS_CRD_EVENTS values  mbh_iss_crd_events_sor;
                      commit;
                    end;
                    end if;
                  end;
                --end if;                
              --end;
            else begin
              -- MBH_ISS_CRD_EVENTS dload update
              update MBH_ISS_CRD_EVENTS mce set dload = 8,
                                                mce.last_modify = sysdate 
              where trim(mbh_iss_crd_events_sor.crf_pan) = trim(mce.crf_pan)
              and mbh_iss_crd_events_sor.fee_type_id = mce.fee_type_id
              and trunc(mbh_iss_crd_events_sor.fee_date) = trunc(mce.fee_date)
              and mbh_iss_crd_events_sor.dload = 1;
              commit;  
            end;
         end if;
   
     END LOOP;
     return 1;
   end;    
   
   function ujkartya_igeny(p_sysdate date) return number is
   cursor cur_d_new_cards is
        select nc.* from d_appl_vezer av 
        join d_new_cards nc on ( nc.newcard_id = av.id and trim(nc.proc_code) = '1' )
        where av.proc_code = 1 
        and trunc(av.mo_date) = trunc(p_sysdate)
        and av.dload = 1
        order by nc.acc_no;
      
      d_new_cards_sor        D_NEW_CARDS%rowtype;
      mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
      app_vez_sor            D_APPL_VEZER%rowtype; 
      db number;
      db1 number;
      db2 NUMBER; 
      tmp_account_number varchar2(24); 
      tmp_fee_type number;
      hiba number;
      crd_first number := 0;
      log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
      dbft number;
      mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
  begin
    FOR d_new_cards_sor  in cur_d_new_cards LOOP
      hiba := 0;
--      select * into app_vez_sor from d_appl_vezer av where av.id = d_new_cards_sor.newcard_id;
--    NO_DATA_FOUND kezelés
      select COUNT(*) into db2 from d_appl_vezer av where av.id = d_new_cards_sor.newcard_id;
      IF db2=1 THEN BEGIN
         select * into app_vez_sor from d_appl_vezer av where av.id = d_new_cards_sor.newcard_id;
      END;
      END IF;
--      
      select count(*) into db from em_dwh em 
      where trim(em.acc_num_24) = trim(app_vez_sor.accno)
      and em.crd_seq_num != '444'
      and substr(em.crd_product,1,2) = substr(d_new_cards_sor.n_crd_product,1,2);
      
      --- fee_type éves vagy havi régi vagy új      
      if nvl(tmp_account_number,'') <> d_new_cards_sor.cre_accno and db = 0 
        then begin 
          select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr 
          where mr.product_id =  d_new_cards_sor.n_crd_product 
          and mr.fee_type_id in (3,15,23)
          and p_sysdate between mr.vdate_start and mr.vdate_end;
        end;
        else begin 
          select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr 
          where mr.product_id =  d_new_cards_sor.n_crd_product 
          and mr.fee_type_id in (3,17,24)
          and p_sysdate between mr.vdate_start and mr.vdate_end;
        end;
      end if;    
      
      if tmp_fee_type is null 
        then hiba := 1;
      end if;
      
      if hiba = 0 
        then begin
          --mbh_iss_crd_events_sor.crf_pan        := d_new_cards_sor.pan;
          mbh_iss_crd_events_sor.crf_acc_num_24 := d_new_cards_sor.cre_accno; 
          mbh_iss_crd_events_sor.crf_pre_pan    := null;
          mbh_iss_crd_events_sor.contract_id    := d_new_cards_sor.contract_id;
          if nvl(tmp_account_number,'') <> d_new_cards_sor.cre_accno
            then begin
                 mbh_iss_crd_events_sor.crf_crd_first  := db+1;
                 crd_first := 1;
            end;
            else begin
             crd_first := crd_first + 1;   
             mbh_iss_crd_events_sor.crf_crd_first  := crd_first;
            end;
           end if;
          mbh_iss_crd_events_sor.fee_type_id    := tmp_fee_type;
          mbh_iss_crd_events_sor.fee_date       := null;
          mbh_iss_crd_events_sor.fee_booking    := 'T';
          mbh_iss_crd_events_sor.orig_creation  := sysdate;
          mbh_iss_crd_events_sor.last_modify    := sysdate;
          mbh_iss_crd_events_sor.dload          := 0;
              
          insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
          commit;
          
          ---- egyébb dijak
          
          -- átvételi dij
          
          -- Rule ellenőrzése mbh_product_fee_ruleból
          db1 := check_mbh_product_fee_rule(d_new_cards_sor.n_crd_product,20,p_sysdate); 
                                                    
          if d_new_cards_sor.crd_post_flg = 1 and db1 = 1
             then begin
                --mbh_iss_crd_events_sor.crf_pan        := d_new_cards_sor.pan;
                mbh_iss_crd_events_sor.crf_acc_num_24 := d_new_cards_sor.cre_accno; 
                mbh_iss_crd_events_sor.crf_pre_pan    := null;
                mbh_iss_crd_events_sor.contract_id    := d_new_cards_sor.contract_id;
                if nvl(tmp_account_number,'') <> d_new_cards_sor.cre_accno
                  then begin
                       mbh_iss_crd_events_sor.crf_crd_first  := db+1;
                       crd_first := 1;
                  end;
                  else begin
                   crd_first := crd_first + 1;  
                   mbh_iss_crd_events_sor.crf_crd_first  := crd_first;
                  end;
                end if;
                mbh_iss_crd_events_sor.fee_type_id    := 20;
                mbh_iss_crd_events_sor.fee_date       := null;
                mbh_iss_crd_events_sor.fee_booking    := 'T';
                mbh_iss_crd_events_sor.orig_creation  := sysdate;
                mbh_iss_crd_events_sor.last_modify    := sysdate;
                mbh_iss_crd_events_sor.dload          := 0;
                    
                insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
                commit;
             
             end;
          end if;
          
          -- gyártási díj
          
          -- Rule ellenőrzése mbh_product_fee_ruleból
          db1 := check_mbh_product_fee_rule(d_new_cards_sor.n_crd_product,7,p_sysdate); 
           
          mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(d_new_cards_sor.n_crd_product,
                                                           d_new_cards_sor.crd_tariff_code,
                                                           d_new_cards_sor.agent1,
                                                           7,
                                                           p_sysdate,
                                                           d_new_cards_sor.cre_accno,
                                                           dbft);
                                                     
          if db1 = 1 and dbft > 0 and  mbh_iss_crd_fees_sor.freq_type_id != 4
             then begin
                --mbh_iss_crd_events_sor.crf_pan        := d_new_cards_sor.pan;
                mbh_iss_crd_events_sor.crf_acc_num_24 := d_new_cards_sor.cre_accno; 
                mbh_iss_crd_events_sor.crf_pre_pan    := null;
                mbh_iss_crd_events_sor.contract_id    := d_new_cards_sor.contract_id;
                if nvl(tmp_account_number,'') <> d_new_cards_sor.cre_accno
                  then begin
                       mbh_iss_crd_events_sor.crf_crd_first  := db+1;
                       crd_first := 1;
                  end;
                  else begin
                   crd_first := crd_first + 1;  
                   mbh_iss_crd_events_sor.crf_crd_first  := crd_first;
                  end;
                end if;
                mbh_iss_crd_events_sor.fee_type_id    := 7;
                mbh_iss_crd_events_sor.fee_date       := null;
                mbh_iss_crd_events_sor.fee_booking    := 'T';
                mbh_iss_crd_events_sor.orig_creation  := sysdate;
                mbh_iss_crd_events_sor.last_modify    := sysdate;
                mbh_iss_crd_events_sor.dload          := 0;
                    
                insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
                commit;
             
             end;
          end if; 
          
          -- surgosségi dij
          /*select count(*) into db1 from MBH_PRODUCT_FEE_RULE mr
          where mr.product_id =  d_new_cards_sor.n_crd_product 
          and mr.fee_type_id = 22
          and p_sysdate between mr.vdate_start and mr.vdate_end;
                                                    
          if d_new_cards_sor.pamess = 'S' and db1 > 0
             then begin
                mbh_iss_crd_events_sor.crf_pan        := d_new_cards_sor.pan;
                mbh_iss_crd_events_sor.crf_acc_num_24 := d_new_cards_sor.cre_accno; 
                mbh_iss_crd_events_sor.crf_pre_pan    := null;
                mbh_iss_crd_events_sor.contract_id    := d_new_cards_sor.contract_id;
                mbh_iss_crd_events_sor.crf_crd_first  := db+1;
                mbh_iss_crd_events_sor.fee_type_id    := 22;
                mbh_iss_crd_events_sor.fee_date       := null;
                mbh_iss_crd_events_sor.fee_booking    := 'T';
                mbh_iss_crd_events_sor.orig_creation  := sysdate;
                mbh_iss_crd_events_sor.last_modify    := sysdate;
                mbh_iss_crd_events_sor.dload          := 0;
                    
                insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
                commit;
             
             end;
          end if;*/           
                                              
        end;  
        else begin --  Hiba logolás
          
          log_sor.id          := d_new_cards_sor.newcard_id;
          log_sor.proc_code   := d_new_cards_sor.proc_code;
          log_sor.pan         := d_new_cards_sor.pan;
          log_sor.crd_name    := d_new_cards_sor.crd_name;
          log_sor.contract_id := d_new_cards_sor.contract_id;
          log_sor.acc_num_24  := d_new_cards_sor.cre_accno;
          log_sor.hiba_leiras := 'Nem található a kártya az EM_DWH-ban, vagy nincs hozzá érvényes szabály!';
          log_sor.forras      := 'N';
          log_sor.cr_date     := sysdate;
                    
          insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
          commit;
        end;
     end if; 
     tmp_account_number :=  d_new_cards_sor.cre_accno; 
    END LOOP;
    return 1;
  end;

  function ujkartya_igeny_feld(p_sysdate date) return number is
     cursor cur_multicard is
        select mc.* from multicard mc 
        join em_dwh em on (trim(em.pan) = trim(mc.pan) )
        where mc.ftype = 'C'
        and mc.dload = 1
        and trunc(mc.emdate) = trunc(p_sysdate);
        
     multicard_sor          MULTICARD%rowtype;
     mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
     mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
     em_dwh_sor             EM_DWH%rowtype;
     db number;
     db1 number;
     db2 NUMBER; 
     tmp_contract_id number(11);
     i number;
       
  begin
    FOR multicard_sor in cur_multicard LOOP
        select em.crd_contract_id into tmp_contract_id from em_dwh em where trim(em.pan) = trim(multicard_sor.pan);
        
        --fee_type_id = 3
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 3
        and mce.dload = 0;

--      NO_DATA_FOUND kezelés
        select COUNT(*) into db2 from EM_DWH em
        where (trim(em.pan) = trim(multicard_sor.pan))
        and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
--
        -- Kártya kikeresése az em_dwhból
        IF db2 = 1 THEN BEGIN
          select * into em_dwh_sor from EM_DWH em
          where (trim(em.pan) = trim(multicard_sor.pan))
          and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
        END;
        END IF;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           3,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 3
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 3
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 15
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 15
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           15,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 15
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 15
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 24
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 24
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           24,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 24
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 24
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 17
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 17
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           17,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 17
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 17
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 23
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 23
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           23,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trim(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 23
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 23
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 20
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 20
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           20,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 7
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.contract_id) = trim(tmp_contract_id)
        and mce.fee_type_id = 7
        and mce.dload = 0;
             
        if db = 1 AND db2 = 1 
          then begin    
/*            -- Kártya kikeresése az em_dwhból 
            select * into em_dwh_sor from EM_DWH em
            where (trim(em.pan) = trim(multicard_sor.pan))
            and em.crd_seq_num = ( select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
*/            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           7,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 3 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
                  end;
                  when mbh_iss_crd_fees_sor.freq_type_id = 5 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.crf_pan = trim(em_dwh_sor.pan),
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.contract_id) = trim(tmp_contract_id)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
    END LOOP;
    return 1;
  end;

  
 function kartya_megujitas(p_sysdate date) return number is
    cursor cur_em_dwh_cards is
        select * from em_dwh em where TRIM(em.pan) in (
                                  SELECT TRIM(e.pan) as pan FROM em_prod.fd_dwh_new e
                                  WHERE e.crd_reason_code='01'
                                  AND e.crd_seq_num='999'
                                  MINUS
                                  SELECT TRIM(t.pan) as pan FROM em_prod.fd_dwh_new_tmp t
                                  WHERE t.crd_reason_code='01'
                                  AND t.crd_seq_num='999')
            and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;
            
            -- megújításhoz és feldolgozásához javítás - FV 2024.07.08.
            /*SELECT * FROM em_dwh e 
            WHERE e.crd_reason_code='01'
            AND e.crd_seq_num='999'
            AND e.crd_crea_date='240824';*/
            
                                   
        em_dwh_sor             EM_DWH%rowtype;
        mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype;
        db  number;  
        db1 number;
--        db2 NUMBER;
        min_crf_crd number := 0;
        log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
        dbft number;
        mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
  begin
    FOR em_dwh_sor  in cur_em_dwh_cards LOOP
        select count(*) into db from mbh_iss_crd_events mbh where trim(mbh.crf_pan) = trim(em_dwh_sor.pre_pan);

        --- Viktor módosítása 2024.05.29
        /*select min(em.crf_crd_first) into min_crf_crd  from em_dwh em 
        where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
        and em.crd_seq_num != '444';*/
/*        select COUNT(min(em.crf_crd_first)) into db2 from em_dwh em
        where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
        and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2)
                                          from em_dwh e
                                          where TRIM(e.pan)=trim(em_dwh_sor.pan)
                                          AND e.crd_seq_num!='444'
                                          AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num)
                                                               FROM em_dwh x
                                                               WHERE TRIM(x.pan)=TRIM(e.pan)) FETCH FIRST ROW ONLY)
        and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;

        IF db2 = 1 THEN BEGIN*/
            select min(em.crf_crd_first) into min_crf_crd from em_dwh em
            where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
            and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2)
                                              from em_dwh e
                                              where TRIM(e.pan) = trim(em_dwh_sor.pan)
                                              AND e.crd_seq_num!='444'
                                              AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num)
                                                                   FROM em_dwh x
                                                                   WHERE TRIM(x.pan) = TRIM(e.pan))FETCH FIRST ROW ONLY)
            and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;
/*        END;
        ELSE min_crf_crd:=NULL;
        END IF;    */
        min_crf_crd:=nvl(min_crf_crd,1);
                    
        -- Viktor módosítás vége
       
        if db = 1 
          then begin
             if mbh_iss_crd_events_sor.crf_crd_first = min_crf_crd
                then  update mbh_iss_crd_events mbh set mbh.crf_crd_first = 1,
                                                        mbh.fee_type_id = decode(mbh.fee_type_id,3,3,5,5,17,15,16,18,24,23,15,15,18,18,23,23),
                                                        mbh.crf_pre_pan = trim(mbh.crf_pan),
                                                        mbh.crf_pan = trim(em_dwh_sor.pan),
                                                        mbh.last_modify = sysdate                      
                       where trim(mbh.crf_pan) = trim(em_dwh_sor.pre_pan)
                       and mbh.dload = 1
                       and mbh.fee_type_id in (3,5,15,16,17,18,23,24);
                else update mbh_iss_crd_events mbh set mbh.crf_pre_pan = trim(mbh.crf_pan),
                                               mbh.crf_pan = trim(em_dwh_sor.pan),
                                               mbh.last_modify = sysdate
                     where trim(mbh.crf_pan) = trim(em_dwh_sor.pre_pan)
                     and mbh.dload = 1
                     and mbh.fee_type_id in (3,5,15,16,17,18,23,24);
              end if;       
             commit;
             
             --- Kell-e
             /*if mbh.dload = 0
               then begin
               end;
             end if;*/
          end;
          else begin
            log_sor.id          := null;
            log_sor.proc_code   := '43';
            log_sor.pan         := em_dwh_sor.pan;
            log_sor.crd_name    := em_dwh_sor.emboss_name;
            log_sor.contract_id := em_dwh_sor.crd_contract_id;
            log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
            log_sor.hiba_leiras := 'Nem található a kártya az MBH_ISS_CRD_EVENTS-ban!';
            log_sor.forras      := 'E';
            log_sor.cr_date     := sysdate;
                    
            insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
            commit;
          end;
        end if;  
            
        /* fee_type = 20 Bankkártya bankfióki átvétel díja */
        
        -- Rule ellenőrzése mbh_product_fee_ruleból
        db1 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,20,p_sysdate); 
                                                        
        if em_dwh_sor.crd_post_codex = 1 and db1 = 1
           then begin
              mbh_iss_crd_events_sor := cr_event_from_em_dwh(em_dwh_sor,20);
                                     
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;
           end;
        end if;
              
        /* fee_type_id = 7 Bankkártya gyártási díj */
        
        -- Rule ellenőrzése mbh_product_fee_ruleból
        db1 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,7,p_sysdate);
        
        mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           7,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           dbft);
                                                     
        if db1 = 1 and dbft > 0 and  mbh_iss_crd_fees_sor.freq_type_id != 3
           then begin
              mbh_iss_crd_events_sor := cr_event_from_em_dwh(em_dwh_sor,7);
                 
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;    
           end;
        end if; 
             
        /* fee_type_id = 6 Bankkártya megújítási díj */
        
        -- Rule ellenőrzése mbh_product_fee_ruleból
        db1 := check_mbh_product_fee_rule(em_dwh_sor.crd_product,6,p_sysdate); 
                                                                
        if db1 = 1
           then begin
              
              mbh_iss_crd_events_sor := cr_event_from_em_dwh(em_dwh_sor,6);
                        
              insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
              commit;
                 
           end;
        end if;            
    END LOOP;
    return 1; 
  end;
  
  function kartya_megujitas_feld(p_sysdate date) return number is
     cursor cur_em_dwh_cards is
        select * from em_dwh em where trim(em.pan) in (
                                  SELECT TRIM(e.pan) as pan FROM em_prod.fd_dwh_new e
                                  WHERE e.crd_reason_code='01'
                                  AND e.crd_seq_num='999'
                                  MINUS
                                  SELECT TRIM(t.pan) as pan FROM em_prod.fd_dwh_new_tmp t
                                  WHERE t.crd_reason_code='01'
                                  AND t.crd_seq_num='999')
           and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan));
           
           -- megújításhoz és feldolgozásához javítás - FV 2024.07.08.
            /*SELECT * FROM em_dwh e 
            WHERE e.crd_reason_code='01'
            AND e.crd_seq_num='999'
            AND e.crd_crea_date='240824';*/
           
  
        em_dwh_sor EM_DWH%rowtype;
        mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype; 
        mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
        db number;  
        db1 number;
        i number;
        
  begin
    FOR em_dwh_sor  in cur_em_dwh_cards LOOP
    
        --fee_type_id = 20
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
        and mce.fee_type_id = 20
        and mce.dload = 0;
             
        if db = 1 
          then begin    
            
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           20,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 20
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 7
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
        and mce.fee_type_id = 7
        and mce.dload = 0;
             
        if db = 1 
          then begin    
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           7,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 if mbh_iss_crd_fees_sor.freq_type_id in (4,5)
                 then begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 4 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
                  end;
                  when mbh_iss_crd_fees_sor.freq_type_id = 5 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(p_sysdate)
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
                  end;
                end case;
                end;
                end if;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 7
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
        
        --fee_type_id = 6
        select count(*) into db from MBH_ISS_CRD_EVENTS mce 
        where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
        and mce.fee_type_id = 6
        and mce.dload = 0;
             
        if db = 1 
          then begin    
            -- Paraméterek kikeresése a mbh_iss_crd_feesből
            mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                           em_dwh_sor.ktgkod,
                                                           em_dwh_sor.agent1,
                                                           6,
                                                           p_sysdate,
                                                           em_dwh_sor.acc_num_24,
                                                           db1);
             
             if (db1 = 1) then
               begin
                 case when mbh_iss_crd_fees_sor.freq_type_id = 4 then
                  begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 1,
                    mce.last_modify = sysdate,
                    mce.fee_date = trunc(LAST_DAY(ADD_MONTHS(p_sysdate,1)))--trunc(LAST_DAY(p_sysdate))
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 6
                    and mce.dload = 0;
                    commit;
                  end;
                  else i := 1;
                end case;
              end;
              else begin
                    update MBH_ISS_CRD_EVENTS mce set mce.dload = 5,
                    mce.last_modify = sysdate
                    where trim(mce.crf_pan) = trim(em_dwh_sor.pan)
                    and mce.fee_type_id = 6
                    and mce.dload = 0;
                    commit;
              end;
            end if;
          end;
        end if;
    END LOOP;
    return 1;
  end;
  
  function kartya_megszunes(p_sysdate date) return number is
     --előző napi dwh-ból az aktuális napi dwh különbsége a kikerült kártyákhoz
     cursor cur_em_dwh_cards is
        select * from em_dwh em where trim(em.pan) in (
                                  SELECT TRIM(t.pan) as pan FROM em_prod.fd_dwh_new_tmp t
                                  WHERE t.crd_status != '9'
                                  AND t.crd_seq_num='999'
                                  MINUS
                                  SELECT TRIM(e.pan) as pan FROM em_prod.fd_dwh_new e)
           and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan));                       
       
     --előző napi dwh-ból az aktuális napi dwh különbsége a megszűnt kártyákhoz
     cursor cur_em_dwh_cards_1 is
     --- F. Viktor javítás 2024.08.07. A kártya megszűnés anomáliák miatt újfajta megoldás
        /*select * from em_dwh em where trim(em.pan) in (select TRIM(t.pan) from em_prod.fd_dwh_new t, em_prod.fd_dwh_new_tmp f
                                                    where trim(t.pan) = trim(f.pan)
                                                    and t.crd_status = '9'
                                                    and f.crd_status <> '9')
            and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan));*/

        select * from em_dwh em where trim(em.pan) in (SELECT TRIM(m.crf_pan) FROM mbh_iss_crd_events m, fd_dwh_new e, fd_dwh_new_tmp ft
                                                       WHERE TRIM(m.contract_id)=TRIM(e.crd_contract_id)
                                                       AND m.contract_id=ft.crd_contract_id
                                                       AND e.crd_seq_num='999'
                                                       AND ft.crd_seq_num='999'
                                                       AND e.crd_status='9'
                                                       AND ft.crd_status='9'
                                                       AND m.dload NOT IN (6,7,9,0)
                                                       AND m.fee_type_id IN (3,5,15,16,17,18,23,24))
        and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan));
     -------------------
                                    
        em_dwh_sor             EM_DWH%rowtype;
        mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype;
        db number;
        log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
        dbl number;
  begin
    
    FOR em_dwh_sor  in cur_em_dwh_cards LOOP
        select count(*) into db from MBH_ISS_CRD_EVENTS mbh 
        where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
        and mbh.fee_type_id in (3,5,15,16,17,18,23,24)
        and mbh.dload = 1;
        
        if db = 1
          then begin
            select * into mbh_iss_crd_events_sor from mbh_iss_crd_events mbh 
            where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
            and mbh.fee_type_id in (3,5,15,16,17,18,23,24)
            and mbh.dload = 1;
                        
            update mbh_iss_crd_events mbh set mbh.dload = 7,
                                          mbh.last_modify = sysdate
            where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
            and mbh.dload in (1);
            commit;
              
          end;
          /*else begin
            log_sor.id          := null;
            log_sor.proc_code   := '9';
            log_sor.pan         := em_dwh_sor.pan;
            log_sor.crd_name    := em_dwh_sor.emboss_name;
            log_sor.contract_id := em_dwh_sor.crd_contract_id;
            log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
            log_sor.hiba_leiras := 'Nem található a kártya az MBH_ISS_CRD_EVENTS-ban!';
            log_sor.forras      := 'E';
            log_sor.cr_date     := sysdate;
            
            select count(*) into dbl from MBH_ISS_FEE_HIBA_LOG hl
            where trim(hl.pan) = trim(em_dwh_sor.pan);
            -- and trunc(hl.
            if dbl = 0
              then begin
                    values log_sor;
                   commit;
              end;
            end if;
          end;*/
        end if;    
    END LOOP;
        
    FOR em_dwh_sor  in cur_em_dwh_cards_1 LOOP
      select count(*) into db from MBH_ISS_CRD_EVENTS mbh 
      where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
      and mbh.fee_type_id in (3,5,15,16,17,18,23,24)
      and mbh.dload = 1;
      
      if db = 1
          then begin
            select * into mbh_iss_crd_events_sor from mbh_iss_crd_events mbh 
            where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
            and mbh.fee_type_id in (3,5,15,16,17,18,23,24)
            and mbh.dload = 1;
                        
            update mbh_iss_crd_events mbh set mbh.dload = 6,
                                              mbh.last_modify = sysdate
            where trim(mbh.crf_pan) = trim(em_dwh_sor.pan)
            and mbh.fee_type_id in (3,5,15,16,17,18,23,24)
            and mbh.dload = 1;
            commit;
               
          end;
          /*else begin
            log_sor.id          := null;
            log_sor.proc_code   := '51';
            log_sor.pan         := em_dwh_sor.pan;
            log_sor.crd_name    := em_dwh_sor.emboss_name;
            log_sor.contract_id := em_dwh_sor.crd_contract_id;
            log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
            log_sor.hiba_leiras := 'Nem található a kártya az MBH_ISS_CRD_EVENTS-ban!';
            log_sor.forras      := 'E';
            select count(*) into dbl from MBH_ISS_FEE_HIBA_LOG hl
            where trim(hl.pan) = trim(em_dwh_sor.pan);
            -- and trunc(hl.
            if dbl = 0 
              then begin       
                    values log_sor;
                   commit;
              end;
            end if;
          end;*/
        end if;
    END LOOP;
    return 1;
  end;
  
  function kartya_letiltas(p_sysdate date) return number is
     cursor cur_em_dwh_cards is
        select * from em_dwh em where trim(em.pan) in (
                                  select TRIM(f.pan) from em_prod.fd_dwh_new f, em_prod.fd_dwh_new_tmp t
                                  where trim(f.pan) = trim(t.pan)
                                  and f.crd_status in('2','3')
                                  and t.crd_status not in('2','3'))
            and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan));         
        
        em_dwh_sor             EM_DWH%rowtype;
        mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype;
        mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
        
        db_rule  number;
        db_param number;
        log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
        i number;
  begin 
    FOR em_dwh_sor  in cur_em_dwh_cards LOOP
        
        /* fee_type_id = 4 Kártyaletiltás díja */
        
        -- Rule ellenőrzése mbh_product_fee_ruleból
        db_rule := check_mbh_product_fee_rule(em_dwh_sor.crd_product,4,p_sysdate);
        -- Paraméterek kikeresése a mbh_iss_crd_feesből
        mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                      em_dwh_sor.ktgkod,
                                                      em_dwh_sor.agent1,
                                                      4,
                                                      p_sysdate,
                                                      em_dwh_sor.acc_num_24,
                                                      db_param);
             
         -- Ha megvan a szabály és a paraméter is
        if (db_rule = 1 and db_param = 1) then
           begin
             case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
              begin
                mbh_iss_crd_events_sor := cr_event_from_em_dwh(em_dwh_sor,4);
                -- dload = 1
                mbh_iss_crd_events_sor.dload          := 1;
                mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate); 
                       
                insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
                commit;
              end;
              else i := 1;
            end case;
          end;
          else begin
            log_sor.id          := null;
            log_sor.proc_code   := '10';
            log_sor.pan         := em_dwh_sor.pan;
            log_sor.crd_name    := em_dwh_sor.emboss_name;
            log_sor.contract_id := em_dwh_sor.crd_contract_id;
            log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
            log_sor.hiba_leiras := 'Nem található a szabály az MBH_ISS_CRD_FEES-ban!';
            log_sor.forras      := 'E';
            log_sor.cr_date     := sysdate;
                    
            insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
            commit;
          end;
        end if;          
    END LOOP;
    return 1;
  end;  
  
  function kartya_orzes(p_sysdate date) return number is
     cursor cur_em_dwh_cards is
        select * from em_dwh em where trim(em.pan) in (
                                  select e.kszam from eub_cardinfo e
                                  where e.cardsys_rcode = 17
                                  and trunc(e.insertdate) = p_sysdate)
          and em.crd_seq_num = (select max(x.crd_seq_num) from EM_DWH x where trim(x.pan) = trim(em.pan))FETCH FIRST ROW ONLY;   
                                        
        em_dwh_sor             EM_DWH%rowtype;
        mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype;
        mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
        db_rule  number;
        db_param number;
        log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
        i number;
  begin 
    FOR em_dwh_sor  in cur_em_dwh_cards LOOP
        
        /* fee_type_id = 19 Bankkártya őrzési díj */
        
        -- Rule ellenőrzése mbh_product_fee_ruleból
        db_rule := check_mbh_product_fee_rule(em_dwh_sor.crd_product,19,p_sysdate);       
        -- Paraméterek kikeresése a mbh_iss_crd_feesből
        mbh_iss_crd_fees_sor := find_mbh_iss_crd_fees(em_dwh_sor.crd_product,
                                                      em_dwh_sor.ktgkod,
                                                      em_dwh_sor.agent1,
                                                      19,
                                                      p_sysdate,
                                                      em_dwh_sor.acc_num_24,
                                                      db_param);
        -- Ha megvan a szabály és a paraméter is
        if (db_rule = 1 and db_param = 1) then
           begin
             case when mbh_iss_crd_fees_sor.freq_type_id = 6 then
              begin
                mbh_iss_crd_events_sor := cr_event_from_em_dwh(em_dwh_sor,19);
                -- dload = 1
                mbh_iss_crd_events_sor.dload          := 1;
                mbh_iss_crd_events_sor.fee_date       := trunc(p_sysdate);
                       
                insert into mbh_iss_crd_events values mbh_iss_crd_events_sor;
                commit;
              end;
              else i := 1;
            end case;
          end;
          else begin
            log_sor.id          := null;
            log_sor.proc_code   := '17';
            log_sor.pan         := em_dwh_sor.pan;
            log_sor.crd_name    := em_dwh_sor.emboss_name;
            log_sor.contract_id := em_dwh_sor.crd_contract_id;
            log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
            log_sor.hiba_leiras := 'Nem található a kártya az EM_DWH-ban vagy hiányzik a szabály!';
            log_sor.forras      := 'D';
            log_sor.cr_date     := sysdate;
                    
            insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
            commit;
          end;
        end if;   
    END LOOP;
    return 1;
  end; 
  
  function fovez_mbh_iss_fees_calc(p_sysdate date) return number is
  i number;
  tmp_start_date date;
  tmp_end_date   date;
  begin
    
    tmp_start_date := sysdate;
    i := pin_ujragyartas(p_sysdate); -- pin + technikai csere + tiltás utáni pótlás
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('pin_ujragyartas', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('pin_ujragyartas');
    
    tmp_start_date := sysdate;
    i := pin_ujragyartas_feld(p_sysdate); -- pin + technikai csere + tiltás utáni pótlás
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('pin_ujragyartas_feld', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('pin_ujragyartas_feld');
    
    tmp_start_date := sysdate;
    i := ujkartya_igeny(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('ujkartya_igeny', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('ujkartya_igeny');
    
    tmp_start_date := sysdate;
    i := ujkartya_igeny_feld(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('ujkartya_igeny_feld', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('ujkartya_igeny_feld');
    
    tmp_start_date := sysdate;
    i := kartya_megujitas(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('kartya_megujitas', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('kartya_megujitas');
    
    tmp_start_date := sysdate;
    i := kartya_megujitas_feld(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('kartya_megujitas_feld', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('kartya_megujitas_feld');
    
    tmp_start_date := sysdate;
    i := kartya_letiltas(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('kartya_letiltas', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('kartya_letiltas');
    
    tmp_start_date := sysdate;
    i := kartya_megszunes(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('kartya_megszunes', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('kartya_megszunes');
    
    tmp_start_date := sysdate;
    i := kartya_orzes(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('kartya_orzes', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('kartya_orzes');
    
    tmp_start_date := sysdate;
    i := mbh_iss_fees_calc(p_sysdate);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('mbh_iss_fees_calc', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('mbh_iss_fees_calc');
    
    tmp_start_date := sysdate;
    i := archiv_mbh_iss_crd_events(p_sysdate,9);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('archiv_mbh_iss_crd_events - 9', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('archiv_mbh_iss_crd_events');

    --Viktor módosítása 2024.05.27
    tmp_start_date := sysdate;
    i := archiv_mbh_iss_crd_events(p_sysdate,6);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('archiv_mbh_iss_crd_events - 6', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('archiv_mbh_iss_crd_events');

    tmp_start_date := sysdate;
    i := archiv_mbh_iss_crd_events(p_sysdate,7);
    tmp_end_date := sysdate;
    insert into log_fovez(function_name,start_date,end_date) values ('archiv_mbh_iss_crd_events - 7', tmp_start_date, tmp_end_date);
    commit;
    dbms_output.put_line('archiv_mbh_iss_crd_events');
    -- Viktor módosítás vége
    
    return 1; 
  end; 
  
  function archiv_mbh_iss_crd_events(par_sysdate date, par_dload number) return number is
    begin
      -- insert 
      insert into h_mbh_iss_crd_events 
      select crd.*, (select to_char(par_sysdate,'yyyymm') as evho from dual) 
      from mbh_iss_crd_events crd
      where crd.dload = par_dload;
      commit; 
      -- delete
      delete from mbh_iss_crd_events crd where crd.dload = par_dload; 
      commit;         
      return 1;
      
      
  end;
  
  function check_mbh_product_fee_rule(p_product_id varchar2,
                                    p_fee_type_id number,
                                    p_sysdate date) return number is
    db number;
  begin
    select count(*) into db from MBH_PRODUCT_FEE_RULE mr
    where mr.product_id = p_product_id 
    and mr.fee_type_id = p_fee_type_id
    and p_sysdate between mr.vdate_start and mr.vdate_end;
    return db;
  end;                                  
  
  function cr_event_from_em_dwh(p_em_dwh_sor EM_DWH%rowtype,
                              p_fee_type_id number) return MBH_ISS_CRD_EVENTS%rowtype is
  mbh_iss_crd_events_sor MBH_ISS_CRD_EVENTS%rowtype;
  begin
    mbh_iss_crd_events_sor.crf_pan        := TRIM(p_em_dwh_sor.pan);
    mbh_iss_crd_events_sor.crf_acc_num_24 := TRIM(p_em_dwh_sor.acc_num_24); 
    mbh_iss_crd_events_sor.crf_pre_pan    := TRIM(p_em_dwh_sor.pre_pan);
    mbh_iss_crd_events_sor.contract_id    := p_em_dwh_sor.crd_contract_id;
    mbh_iss_crd_events_sor.crf_crd_first  := nvl(p_em_dwh_sor.crf_crd_first,1);
    mbh_iss_crd_events_sor.fee_type_id    := p_fee_type_id;
    mbh_iss_crd_events_sor.fee_date       := null;
    mbh_iss_crd_events_sor.fee_booking    := 'T';
    mbh_iss_crd_events_sor.orig_creation  := sysdate;
    mbh_iss_crd_events_sor.last_modify    := sysdate;
    mbh_iss_crd_events_sor.dload          := 0;   
    return mbh_iss_crd_events_sor;
  end;
  
  function mbh_iss_crd_events_osfeltoltes(p_sysdate date) return number is
     cursor cur_em_dwh is
        /*--2024.03.16 élesítéskori select
        select * from em_dwh em 
        where em.crd_seq_num = '999'
        and em.crd_status in ('0','1','C')
        and em.crd_product = '31208';--and em.crd_product != '19000';  
        ----*/
        ----2024.06.01 élesítéskori select Viktor: 2024.05.28
        /*SELECT DISTINCT * FROM em_dwh e
        WHERE TRIM(e.pan) IN (SELECT fd.pan 
                              FROM fd_dwh_new fd 
                              WHERE fd.crd_contract_id IN(select DISTINCT em.crd_contract_id 
                                                          FROM fd_dwh_new em 
                                                          where em.crd_seq_num = '999'
                                                          and em.crd_status in ('0','1','C')
                                                          and em.crd_product != '19000'
                                                          AND em.crd_status!='9'
                                                          MINUS
                                                          SELECT me.contract_id 
                                                          FROM mbh_iss_crd_events me
                                                          WHERE me.fee_type_id IN (3,5,15,16,17,18,23,24)
                                                          AND me.dload IN (0,1))
                              AND fd.crd_seq_num='999')
         AND e.crd_seq_num='999';
        ----  */
        --- ősfeltöltés javítása - 2024.07.08 FV kérésére
        SELECT DISTINCT * FROM em_dwh e
        WHERE TRIM(e.pan) IN (SELECT TRIM(fd.pan) 
                              FROM fd_dwh_new fd 
                              WHERE fd.crd_contract_id IN(select em.crd_contract_id 
                                                          FROM fd_dwh_new em 
                                                          where em.crd_seq_num = '999'
                                                          and em.crd_status in ('0','1','C','2','3')
                                                          and em.crd_product != '19000'
                                                          AND NOT (SUBSTR(em.crd_product,1,2) IN ('31','33','43') 
                                                                   AND EXTRACT(YEAR FROM (last_day(to_date(em.crd_expiry_dat,'YYMM')))) 
                                                                   IN (EXTRACT(year FROM (TRUNC(SYSDATE))),EXTRACT(year FROM (TRUNC(SYSDATE)))+1))
                                                          MINUS
                                                          SELECT me.contract_id 
                                                          FROM mbh_iss_crd_events me
                                                          WHERE me.fee_type_id IN (3,5,15,16,17,18,23,24)
                                                          AND me.dload IN (0,1,5,8))
                              AND fd.crd_seq_num='999')
         AND e.crd_seq_num='999';
         ---javítás vége
     mbh_iss_crd_events_sor mbh_iss_crd_events%rowtype;
     mbh_iss_crd_fees_sor   MBH_ISS_CRD_FEES%rowtype;
     em_dwh_sor em_dwh%rowtype;
     min_crf_crd number;
     db number;
     db1 number; 
--     db2 NUMBER;
     tmp_contract_id number(11);
     tmp_fee_type number;
     tmp_fee_date varchar2(6);
     fdb number;
     log_sor MBH_ISS_FEE_HIBA_LOG%rowtype;
  begin
    FOR em_dwh_sor  in cur_em_dwh LOOP
      /* Viktor javítása 2024.05.31
      select min(em.crf_crd_first) into min_crf_crd  from em_dwh em 
      where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
      and em.crd_seq_num != '444';
      */
       tmp_fee_type := null;
      
--     NO_DATA_FOUND kezelés      
/*       select COUNT(min(em.crf_crd_first)) into db2 from em_dwh em
       where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
       and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2) 
                                           from em_dwh e 
                                           where TRIM(e.pan)=trim(em_dwh_sor.pan)
                                           AND e.crd_seq_num!='444'
                                           AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num) 
                                                                FROM em_dwh x
                                                                WHERE TRIM(x.pan)=TRIM(e.pan))FETCH FIRST ROW ONLY)
       and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;
--
       IF db2 = 1 THEN BEGIN*/
           select min(em.crf_crd_first) into min_crf_crd from em_dwh em
           where trim(em.acc_num_24) = trim(em_dwh_sor.acc_num_24)
           and substr(em.crd_product,1,2) = (select substr(e.crd_product,1,2)
                                               from em_dwh e
                                               where TRIM(e.pan)=trim(em_dwh_sor.pan)
                                               AND e.crd_seq_num!='444'
                                               AND e.crd_seq_num = (SELECT MAX(x.crd_seq_num)
                                                                    FROM em_dwh x
                                                                    WHERE TRIM(x.pan)=TRIM(e.pan))FETCH FIRST ROW ONLY)
           and em.crd_seq_num != '444' FETCH FIRST ROW ONLY;
/*       END;
       ELSE min_crf_crd:=NULL;
       END IF;*/
         
       min_crf_crd:=nvl(min_crf_crd,1);
      -- Viktor javítás vége
      
      
      --- fee_type éves vagy havi régi vagy új      
      if min_crf_crd = em_dwh_sor.crf_crd_first 
        then begin 
          select count(*) into fdb from MBH_PRODUCT_FEE_RULE mr 
          where mr.product_id = em_dwh_sor.crd_product 
          and mr.fee_type_id in (5,15,18)
          and p_sysdate between mr.vdate_start and mr.vdate_end;
          
          if fdb = 1 
            then 
              select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr 
              where mr.product_id = em_dwh_sor.crd_product 
              and mr.fee_type_id in (5,15,18)
              and p_sysdate between mr.vdate_start and mr.vdate_end;
              else begin --  Hiba logolás
          
                log_sor.id          := null;
                log_sor.proc_code   := 0;
                log_sor.pan         := em_dwh_sor.pan;
                log_sor.crd_name    := em_dwh_sor.emboss_name;
                log_sor.contract_id := em_dwh_sor.crd_contract_id;
                log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
                log_sor.hiba_leiras := 'Nem található a kártya az MBH_PRODUCT_FEE_RULE szabály!';
                log_sor.forras      := 'OF';
                log_sor.cr_date     := sysdate;
                          
                insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
                commit;
              end;
          end if;    
        end;
        else begin 
          select count(*)into fdb from MBH_PRODUCT_FEE_RULE mr 
          where mr.product_id = em_dwh_sor.crd_product
          and mr.fee_type_id in (5,16,17)
          and p_sysdate between mr.vdate_start and mr.vdate_end;
          
          
          if fdb = 1
            then
              select mr.fee_type_id into tmp_fee_type from MBH_PRODUCT_FEE_RULE mr 
              where mr.product_id = em_dwh_sor.crd_product
              and mr.fee_type_id in (5,16,17)
              and p_sysdate between mr.vdate_start and mr.vdate_end;
             else begin --  Hiba logolás
          
                log_sor.id          := null;
                log_sor.proc_code   := 0;
                log_sor.pan         := em_dwh_sor.pan;
                log_sor.crd_name    := em_dwh_sor.emboss_name;
                log_sor.contract_id := em_dwh_sor.crd_contract_id;
                log_sor.acc_num_24  := em_dwh_sor.acc_num_24;
                log_sor.hiba_leiras := 'Nem található a kártya az MBH_PRODUCT_FEE_RULE szabály!';
                log_sor.forras      := 'OF';
                log_sor.cr_date     := sysdate;
                          
                insert into MBH_ISS_FEE_HIBA_LOG values log_sor;
                commit;
              end;
            end if;
        end;
      end if;    
          
      --- Insert éves vagy havi dij újra előjegyzése
      if tmp_fee_type in (5,16,18)
        then begin
            tmp_fee_date := '24' || substr(em_dwh_sor.crd_crea_date,3,4);
            mbh_iss_crd_events_sor.crf_pan        := trim(em_dwh_sor.pan);
            mbh_iss_crd_events_sor.crf_acc_num_24 := em_dwh_sor.acc_num_24; 
            mbh_iss_crd_events_sor.crf_pre_pan    := trim(em_dwh_sor.pre_pan);
            mbh_iss_crd_events_sor.contract_id    := em_dwh_sor.crd_contract_id;
            if min_crf_crd = em_dwh_sor.crf_crd_first 
              then mbh_iss_crd_events_sor.crf_crd_first  := 1;
              else mbh_iss_crd_events_sor.crf_crd_first  := em_dwh_sor.crf_crd_first;
            end if;
            mbh_iss_crd_events_sor.fee_type_id    := tmp_fee_type;
            if to_date(tmp_fee_date,'YYMMDD') > trunc(sysdate)
               then  mbh_iss_crd_events_sor.fee_date       := to_date(tmp_fee_date,'YYMMDD');
               else  mbh_iss_crd_events_sor.fee_date       := add_months(to_date(tmp_fee_date,'YYMMDD'),12);
            end if;   
            mbh_iss_crd_events_sor.fee_booking    := 'T';
            mbh_iss_crd_events_sor.orig_creation  := sysdate;
            mbh_iss_crd_events_sor.last_modify    := sysdate;
            mbh_iss_crd_events_sor.dload          := 1;
            
            insert into MBH_ISS_CRD_EVENTS values  mbh_iss_crd_events_sor;
            commit;   
        end;
        else begin
          mbh_iss_crd_events_sor.crf_pan        := trim(em_dwh_sor.pan);
          mbh_iss_crd_events_sor.crf_acc_num_24 := em_dwh_sor.acc_num_24; 
          mbh_iss_crd_events_sor.crf_pre_pan    := trim(em_dwh_sor.pre_pan);
          mbh_iss_crd_events_sor.contract_id    := em_dwh_sor.crd_contract_id;
          if min_crf_crd = em_dwh_sor.crf_crd_first 
            then mbh_iss_crd_events_sor.crf_crd_first  := 1;
            else mbh_iss_crd_events_sor.crf_crd_first  := em_dwh_sor.crf_crd_first;
          end if;
          mbh_iss_crd_events_sor.fee_type_id    := tmp_fee_type;   
          mbh_iss_crd_events_sor.fee_date       := trunc(add_months(last_day(sysdate),1));
          mbh_iss_crd_events_sor.fee_booking    := 'T';
          mbh_iss_crd_events_sor.orig_creation  := sysdate;
          mbh_iss_crd_events_sor.last_modify    := sysdate;
          mbh_iss_crd_events_sor.dload          := 1;
            
          insert into MBH_ISS_CRD_EVENTS values  mbh_iss_crd_events_sor;
          commit;   
        end;
      end if;
    END LOOP;
  
    return 1;
  end; 
  --begin
  -- Initialization
  --<Statement>;
end PKG_EM_TR_FEES;
/
